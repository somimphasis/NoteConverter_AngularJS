(function() {
    "use strict";
    var StatusCodes = {
        success: 200,
        badRequest: 400
    };
    var ErrorCodes = {
        ok: "OK"
    };
    function generateNewJobID() {
        var guid = "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, function(c) {
            var r = Math.random() * 16 | 0, v = c == "x" ? r : r & 3 | 8;
            return v.toString(16);
        });
        return guid;
    }
    function validateEmail(emailArg) {
        var regex = /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/i;
        var result = regex.test(emailArg);
        return result;
    }
    var localizedLanguage = null;
    deferredBootstrapper.bootstrap({
        element: window.document,
        module: "app",
        resolve: {},
        onError: function(error) {
            console.log("error: " + error);
        }
    });
    var app = angular.module("app", [ "ngSanitize", "ngCookies", "ui.router", "ui.bootstrap", "templates-main" ]);
    app.constant("_", window._);
    app.config(function($stateProvider, $urlServiceProvider) {
        $stateProvider.state("scanScreen", {
            component: "scanScreen"
        });
        $urlServiceProvider.rules.otherwise({
            state: "scanScreen"
        });
    });
    app.run(function($rootScope) {
        console.log("App init!");
        $rootScope._ = window._;
    });
    angular.module("app").component("alertBanner", {
        templateUrl: "Scripts/App/Components/alertBanner.html",
        bindings: {
            resolve: "<",
            close: "&",
            dismiss: "&"
        }
    });
    (function() {
        "use strict";
        angular.module("app").component("basicAlert", {
            bindings: {
                resolve: "<",
                close: "&",
                dismiss: "&"
            },
            templateUrl: "Scripts/App/Components/basicAlert.html"
        });
    })();
    angular.module("app").component("featurePopover", {
        templateUrl: "Scripts/App/Components/featurePopover.html",
        bindings: {
            resolve: "<",
            close: "&",
            dismiss: "&"
        },
        controller: function($scope, $element, $attrs, $timeout, modalService, scanOptionsService, featurePopoverService) {
            var $ctrl = this;
            var $root = $scope.$root;
            $ctrl.$onInit = function() {
                $ctrl.feature = $ctrl.resolve.feature;
                if (featurePopoverService.popoverState[$ctrl.feature.name] === undefined) {
                    featurePopoverService.popoverState[$ctrl.feature.name] = {
                        popoverDisplayed: false
                    };
                }
                scanOptionsService.updateDisabledOptions($ctrl.resolve.feature);
                $timeout(function() {
                    showPopoverHelper($ctrl.resolve.event, $ctrl.feature.name, featurePopoverService.popoverState[$ctrl.feature.name]);
                    $timeout(function() {
                        $ctrl.show = true;
                    });
                }, 50);
            };
            $ctrl.selectOption = function(option) {
                if (option.disabled) {
                    modalService.showAlert(option.disabledMessage);
                } else {
                    $ctrl.feature.selectedOption = option;
                }
                $ctrl.close();
            };
            $ctrl.openMoreOptionsModal = function() {
                $ctrl.close();
                modalService.openComponentModal($ctrl.feature.moreOptionsModal, {
                    feature: $ctrl.feature
                }).result.then(function(modifiedFeature) {
                    _.assign($ctrl.feature, modifiedFeature);
                });
            };
            function showPopoverHelper(e, name, options) {
                var winHeight = $(window).height();
                var winWidth = $(window).width();
                var contents = angular.element("#" + name + " div.contents");
                var popover = angular.element("#" + name);
                var popoverModal = popover.parents(".modal-dialog");
                var arrow = angular.element("arrow");
                var arrowContents = angular.element("arrow *");
                contents.css({
                    position: "fixed",
                    "z-index": 1,
                    display: "none"
                });
                popoverModal.css({
                    width: "initial",
                    height: "initial"
                });
                var height = contents.data("height") || contents.height();
                var width = contents.width();
                var padding = contents.innerWidth() - width;
                contents.data("height", height);
                var bottom = 0;
                var top = 0;
                var mid = height / 2;
                top = Math.max(2, e.pageY - mid);
                var float = "left";
                var arrowLeft = 0;
                var transform = "none";
                top = Math.max(8, top);
                if (options != null && options.top !== undefined) {
                    top = options.top;
                }
                var totalSize = width + padding + arrow.width();
                var availableSpaceOnRight = winWidth - e.pageX;
                var availableSpaceOnLeft = winWidth - availableSpaceOnRight;
                var calcLeft = e.pageX - totalSize;
                var showArrow = true;
                var maxHeight = winWidth >= 1024 ? 584 : 470;
                if (totalSize < availableSpaceOnRight) {
                    calcLeft = e.pageX + arrow.width();
                    arrowLeft = e.pageX;
                    float = "right";
                } else if (totalSize < availableSpaceOnLeft) {
                    arrowLeft = e.pageX - arrow.width();
                } else {
                    calcLeft = (winWidth - totalSize) / 2;
                    arrowLeft = e.pageX - arrow.width() / 2;
                    transform = "rotate(270deg)";
                    showArrow = false;
                }
                if (showArrow) {
                    arrow.css({
                        left: arrowLeft,
                        top: e.pageY - arrow.height() / 2,
                        "z-index": 1300,
                        transform: transform
                    });
                    arrowContents.css({
                        float: float
                    });
                    arrow.show();
                } else {
                    arrow.hide();
                }
                if (top + contents.height() + 16 >= winHeight) {
                    var diff = winHeight - (top + contents.height());
                    top = top - Math.abs(diff) - 24;
                }
                if (top < 0) {
                    contents.css({
                        left: calcLeft,
                        display: "block",
                        bottom: "8px",
                        maxHeight: maxHeight
                    });
                } else {
                    contents.css({
                        left: calcLeft,
                        display: "block",
                        top: top,
                        maxHeight: maxHeight,
                        bottom: ""
                    });
                }
                var scrollBarsFixed = false;
                var fixScrollBars = function() {
                    if (!scrollBarsFixed) {
                        var scrollContent = angular.element("#" + name + " div.popover-scroll-content");
                        var scrollChild = angular.element("#" + name + " div.popover-scroll-content ul.action-list");
                        var buttons = angular.element("#" + name + " div.popover-scroll-content ul.action-list button");
                        var scrollContentWidth = scrollContent.outerWidth() - 2;
                        var scrollContentInnerWidth = buttons[0].scrollWidth;
                        var scrollContentHeight = scrollContent.height();
                        var scrollContentInnerHeight = scrollChild.height();
                        if (scrollContentWidth == scrollContentInnerWidth && scrollContentHeight != scrollContentInnerHeight || scrollContentWidth < scrollContentInnerWidth) {
                            buttons.css({
                                "margin-right": "50px"
                            });
                            scrollBarsFixed = true;
                        }
                    }
                    var width = contents.width();
                    if (float === "left" && calcLeft + width + padding != arrowLeft) {
                        calcLeft = arrowLeft - width - padding;
                        contents.css({
                            left: calcLeft
                        });
                    }
                };
                fixScrollBars();
                angular.element("#" + name + " .image").bind("load", fixScrollBars);
                $timeout(fixScrollBars, 500);
            }
        }
    });
    angular.module("app").component("fileFormatModal", {
        templateUrl: "Scripts/App/Components/fileFormatModal.html",
        bindings: {
            resolve: "<",
            close: "&",
            dismiss: "&"
        },
        controller: function(modalService) {
            var $ctrl = this;
            $ctrl.$onInit = function() {
                $ctrl.feature = _.cloneDeep($ctrl.resolve.data.feature);
            };
            $ctrl.selectOption = function(option) {
                if (option.disabled) {
                    modalService.showAlertBanner(option.disabledMessage);
                } else {
                    $ctrl.feature.selectedOption = option;
                }
            };
            $ctrl.ok = function() {
                $ctrl.close({
                    $value: $ctrl.feature
                });
            };
            $ctrl.openFeaturePopover = function(feature) {
                modalService.showPopover(feature, event);
            };
        }
    });
    angular.module("app").component("generalAlert", {
        bindings: {
            resolve: "<",
            close: "&",
            dismiss: "&"
        },
        templateUrl: "Scripts/App/Components/generalAlert.html",
        controller: function($scope, $element, $attrs, errorHandlerService) {
            var $ctrl = this;
            $ctrl.$onInit = function() {
                $ctrl.title = $ctrl.resolve.data.title;
                $ctrl.additionalInfo = $ctrl.resolve.data.additionalInfo;
                $ctrl.additionalInfo2 = $ctrl.resolve.data.additionalInfo2;
                $ctrl.button1Callback = $ctrl.resolve.data.button1Callback;
                $ctrl.button2Callback = $ctrl.resolve.data.button2Callback;
                $ctrl.button1Text = $ctrl.resolve.data.button1Text ? $ctrl.resolve.data.button1Text : "SDE_CLOSE";
                $ctrl.button2Text = $ctrl.resolve.data.button2Text ? $ctrl.resolve.data.button2Text : "SDE_CANCEL";
                if ($ctrl.resolve.data.button1Glyph) {
                    $ctrl.button1Classes = "btn btn-medium btn-glyph-label btn-secondary-alert " + $ctrl.resolve.data.button1Glyph;
                } else {
                    $ctrl.button1Classes = "btn btn-medium btn-glyph-label btn-secondary-alert xrx-close";
                }
                if ($ctrl.resolve.data.button2Glyph) {
                    $ctrl.button2Classes = "btn btn-medium btn-glyph-label btn-secondary-alert " + $ctrl.resolve.data.button2Glyph;
                } else {
                    $ctrl.button2Classes = "btn btn-medium btn-glyph-label btn-secondary-alert xrx-cancel";
                }
            };
            $ctrl.button1 = function() {
                if ($ctrl.button1Callback != null) {
                    $ctrl.button1Callback();
                }
                $ctrl.close();
            };
            $ctrl.button2 = function() {
                if ($ctrl.button2Callback != null) {
                    $ctrl.button2Callback();
                }
                $ctrl.close();
            };
        }
    });
    angular.module("app").component("keypad", {
        templateUrl: "Scripts/App/Components/keypad.html",
        bindings: {
            resolve: "<",
            close: "&",
            dismiss: "&"
        },
        controller: function(modalService) {
            var $ctrl = this;
            $ctrl.value = "1";
            $ctrl.max = 9999;
            $ctrl.override = true;
            $ctrl.$onInit = function() {
                $ctrl.value = $ctrl.resolve.data.value.toString();
                angular.element("#valueBox").focus();
            };
            $ctrl.validate = function() {
                return parseInt($ctrl.value) <= $ctrl.max;
            };
            $ctrl.keypadPressed = function(value) {
                if ($ctrl.override) {
                    $ctrl.value = "";
                    $ctrl.override = false;
                }
                if ($ctrl.value.length === 4 && parseInt($ctrl.value) === 0) {
                    $ctrl.delete();
                }
                $ctrl.value += value;
                if (!$ctrl.validate()) {
                    $ctrl.showError();
                    $ctrl.value = "9999";
                    $ctrl.override = true;
                }
                if ($ctrl.value.length === 5) {
                    $ctrl.delete();
                }
            };
            $ctrl.delete = function() {
                $ctrl.value = $ctrl.value.substring(0, $ctrl.value.length - 1);
                angular.element("#valueBox").focus();
            };
            $ctrl.clear = function() {
                $ctrl.value = "1";
                $ctrl.override = true;
            };
            $ctrl.update = function() {
                if (parseInt($ctrl.value) === 0) {
                    $ctrl.value = "1";
                }
                $ctrl.close({
                    $value: parseInt($ctrl.value)
                });
            };
            $ctrl.showError = function(message) {
                if (!message) {
                    message = "SDE_QUANTITY_CANNOT_BE";
                }
                modalService.showAlertBanner(message);
            };
        }
    });
    angular.module("app").component("privacyPolicy", {
        templateUrl: "Scripts/App/Components/privacyPolicy.html",
        bindings: {
            resolve: "<",
            close: "&",
            dismiss: "&"
        },
        controller: function($scope, $http, modalService, strings, $timeout) {
            var $ctrl = this;
            $ctrl.privacyPolicy = "";
            $ctrl.$onInit = function() {
                var progress = modalService.showProgressAlert();
                $http.get("https://appgallery.services.xerox.com/api/apps/template-privacy-policy", {
                    timeout: parseInt(strings.TIMEOUT)
                }).then(function(response) {
                    $ctrl.privacyPolicy = response.data;
                    $ctrl.showVersion = strings.VERSION;
                    progress.close();
                    $timeout(disableLinks, 250);
                }).catch(function(error) {
                    $ctrl.showVersion = strings.VERSION;
                    progress.close();
                    modalService.showGeneralError(error);
                });
            };
            var disableLinks = function() {
                $("a").css("pointer-events", "none");
            };
        }
    });
    (function() {
        "use strict";
        angular.module("app").component("progressAlert", {
            bindings: {
                resolve: "<",
                close: "&",
                dismiss: "&"
            },
            templateUrl: "Scripts/App/Components/progressAlert.html"
        });
    })();
    angular.module("app").component("progressBanner", {
        templateUrl: "Scripts/App/Components/progressBanner.html",
        bindings: {
            resolve: "<",
            close: "&",
            dismiss: "&"
        },
        controller: function($scope, $timeout) {
            var $ctrl = this;
            $ctrl.showSpinner = true;
            $ctrl.status = "SDE_PREPARING_SCAN";
            $scope.$on("jobProgress", function(event, data) {
                $ctrl.status = getStatus(data);
                if (data === "Completed") {
                    $ctrl.complete = true;
                    $timeout(function() {
                        $ctrl.close();
                    }, 3e3);
                }
            });
            function getStatus(status) {
                switch (status) {
                  case "Preparing to Scan":
                    return "SDE_PREPARING_SCAN";

                  case "Preparing to Print":
                    return "SDE_PREPARING_PRINT";

                  case "Processing":
                  case "Pending":
                  case "JobIncoming":
                    return "SDE_PROCESSING";

                  case "Completed":
                    return "SDE_COMPLETE";

                  case "JobCanceledByUser":
                  case "CanceledByUser":
                    return "SDE_CANCELLED";

                  case "AbortBySystem":
                  case "JobAborted":
                    return "SDE_JOB_ABORTED";

                  case "InputScanSizeNotDetermined":
                    return "SDE_INPUT_SIZE_NOT1";

                  case "PreparingToScan":
                    return "SDE_PREPARING_SCAN";

                  case "ProcessingStopped":
                    return "SDE_PROCESSING_STOPPED";

                  case "Exit":
                    return "SDE_EXIT";

                  default:
                    return status;
                }
            }
        }
    });
    angular.module("app").component("scanScreen", {
        templateUrl: "Scripts/App/Components/scanScreen.html",
        controller: function($http, $scope, $location, $timeout, $document, $state, modalService, scanOptionsService, apiService, scanService, errorHandlerService, logService, strings, storageService, configurationService, session, device) {
            var $ctrl = this;
            var storageProvider = storageService.getLocalStorage(true);
            $ctrl.isCreditsEnabled = false;
            var params = $location.search();
            var emailHasError = falsescan();
            $ctrl.maxPagesPerJobStyle = "text-align:left !important;";
            $ctrl.$onInit = function() {
                $ctrl.privacyURL = "https://appgallery.services.xerox.com/api/apps/template-privacy-policy";
                $ctrl.scanOptionsService.email = session.email;
                $ctrl.validationStatus = false;
                $timeout(function() {
                    $ctrl.mainForm["email"].$setTouched();
                }, 0);
                if (session.email) {
                    $ctrl.validateAllFields();
                }
                if (!device.isEighthGen && !device.isThirdGenBrowser) {
                    $(".scroll-container").scroll(_.debounce(function() {
                        $(this).scrollTop(0);
                    }, 250, {
                        leading: true
                    }));
                }
            };
            $scope.$on("jobProgress", function(event, enable) {
                console.log(enable);
                logService.logMsg("$scope.$on -> event:" + event + " enable:" + enable, "information");
                if (enable !== null && enable === "JOB_COMPLETED_SUCCESSFULLY") {
                    $ctrl.refreshCredits();
                }
            });
            var paramsJsonStr = JSON.stringify(params, null, 2);
            logService.logMsg("scanScreen -> paramsJsonStr:" + paramsJsonStr, "information");
            $ctrl.scanOptionsService = scanOptionsService;
            $ctrl.scanService = scanService;
            $ctrl.errorHandlerService = errorHandlerService;
            scanOptionsService.fileName = "Xerox Scan";
            $ctrl.fileNameEmpty = function() {
                return $ctrl.scanOptionsService.fileName === undefined || $ctrl.scanOptionsService.fileName === null || $ctrl.scanOptionsService.fileName < 1;
            };
            $scope.$on("globalAppMessage", function(event, data) {
                if (data !== null && data === "Exit") {
                    $ctrl.exit();
                }
            });
            $scope.$on("globalAppMessage", function(event, data) {
                if (data !== null && data === "logout") {
                    $state.go("createAdminAccountApp");
                    xrxSessionExitApplication("http://127.0.0.1", null);
                }
            });
            $ctrl.resetSettings = function(shouldShowAlert) {
                scanOptionsService.resetFeatureSettings();
                scanOptionsService.email = "";
                $ctrl.scanOptionsService.fileName = strings["SDE_XEROX_SCAN"];
                $timeout(function() {
                    $ctrl.clearValidation();
                    $ctrl.validationStatus = false;
                }, 0);
                if (shouldShowAlert) {
                    errorHandlerService.wncWasReset();
                }
            };
            $ctrl.openFeaturePopover = function(feature) {
                modalService.showPopover(feature, event);
            };
            $ctrl.scan = function() {
                logService.logMsg("ctrl.scan ...", "information");
                mainDeviceconfig();
            };
            $ctrl.hasError = function(field) {
                var errors = $ctrl.mainForm[field].$error;
                emailHasError = (errors.required || errors.compareTo) && $ctrl.mainForm.$submitted || !_.isEmpty(errors) && !errors.required && $ctrl.mainForm[field].$touched;
                return emailHasError;
            };
            $ctrl.fieldChange = function(field) {
                var control1 = $ctrl.mainForm["email"];
                if (control1.$touched) {
                    $ctrl.validateAllFields();
                }
            };
            $ctrl.fieldBlur = function(field) {
                var control1 = $ctrl.mainForm["email"];
                if (control1.$touched) {
                    $ctrl.validateAllFields();
                }
            };
            $ctrl.clearValidation = function() {
                $("#emailHasErrors").hide();
                $("#emailHasErrorRequired").hide();
                $("#emailHasErrorNotValid").hide();
            };
            $ctrl.openPrivacy = function() {
                modalService.openComponentModal("privacyPolicy").result.then(angular.noop, angular.noop);
            };
            $ctrl.validateAllFields = function() {
                var emailStr = $ctrl.scanOptionsService.email !== null && $ctrl.scanOptionsService.email !== undefined ? $ctrl.scanOptionsService.email.toLowerCase() : "";
                if (emailStr === "") {
                    console.log("Email required");
                    $("#emailHasErrors").show();
                    $("#emailHasErrorRequired").show();
                    $("#emailHasErrorNotValid").hide();
                    $ctrl.validationStatus = false;
                    return false;
                }
                if (!validateEmail(emailStr)) {
                    console.log("Email invalid");
                    $("#emailHasErrors").show();
                    $("#emailHasErrorRequired").hide();
                    $("#emailHasErrorNotValid").show();
                    $ctrl.validationStatus = false;
                    return false;
                }
                $ctrl.clearValidation();
                $ctrl.validationStatus = true;
                return true;
            };
            function mainDeviceconfig() {
                logService.logMsg("mainDeviceconfig()...", "information");
                var regex = /^[^\\\/\:\*\?\"\<\>\|]+$/;
                if (regex.test(scanOptionsService.fileName)) {
                    logService.logMsg("mainDeviceconfig() -> if (regex.test(scanOptionsService.fileName))", "information");
                    xrxDeviceConfigGetInterfaceVersion("http://127.0.0.1", DeviceCallBack_Success, DeviceCallBack_Failure, null, true);
                } else {
                    logService.logMsg("mainDeviceconfig() ELSE FOR if (regex.test(scanOptionsService.fileName))", "information");
                    var text = strings["SDE_CHARACTERS_CANNOT_BE"].replace("{0}", '\\ / : * ? " < > |');
                    errorHandlerService.showErrorAlert(text, "", null, null);
                }
            }
            function DeviceCallBack_Success() {
                getScanStatus();
            }
            function DeviceCallBack_Failure(respText, newresp) {
                logService.logMsg("DeviceCallBack_Failure -> respText:" + respText + " newresp:" + newresp, "error");
                errorHandlerService.XBB_DEVICE_EIP_DEVICE_CONFIG_DISABLED();
            }
            function getScanStatus() {
                logService.logMsg("getScanStatus()...", "information");
                xrxScanV2GetInterfaceVersion("http://127.0.0.1", callback_success, callback_failure, null, true);
            }
            function callback_success(reqText, respText) {
                logService.logMsg("getScanStatus() -> callback_success", "information");
                getjobmamt();
            }
            function callback_failure(respText, newresp) {
                logService.logMsg("callback_failure -> respText:" + respText + " newresp:" + newresp, "error");
                errorHandlerService.DEVICE_EIP_SCANV2_SERVICES_DISABLED();
            }
            function getjobmamt() {
                logService.logMsg("getjobmanagementInterfaceVersion()...", "information");
                xrxJobMgmtGetInterfaceVersion("http://127.0.0.1", Jobcallback_success, Jobcallback_failure, null, true);
            }
            function Jobcallback_success(reqText, respText) {
                logService.logMsg("Jobcallback_success()...", "information");
                CheckTemplate();
            }
            function Jobcallback_failure(reqText, respText) {
                logService.logMsg("Jobcallback_failure -> reqText:" + reqText + " respText:" + respText, "error");
                errorHandlerService.DEVICE_EIP_SCANV2_SERVICES_DISABLED();
            }
            function CheckTemplate() {
                xrxTemplateGetInterfaceVersion("http://127.0.0.1", Templatecallback_success, Templatecallback_failure, null, true);
            }
            function Templatecallback_success() {
                logService.logMsg("Templatecallback_success()...", "information");
                var values = scanOptionsService.getValues();
                logService.logMsg("Templatecallback_success() values:" + values, "information");
                "##############################################################################";
                "####################              SCAN       #################################";
                "##############################################################################";
                scanService.scan(values);
            }
            function Templatecallback_failure(respText, newresp) {
                logService.logMsg("Templatecallback_failure -> respText:" + respText + " newresp:" + newresp, "error");
                errorHandlerService.DEVICE_EIP_SCANV2_SERVICES_DISABLED();
            }
            var captureScanPress = function(event) {
                if (event !== null) {
                    if (event.which == "4098") {
                        if (typeof EIP_CloseEmbeddedKeyboard === "function") {
                            EIP_CloseEmbeddedKeyboard();
                        }
                        if ($ctrl.validationStatus) {
                            $ctrl.scan();
                        }
                    }
                }
            };
            $document.on("keyup", captureScanPress);
            $ctrl.$onDestroy = function() {
                console.log("destroying ");
                $document.off("keyup", captureScanPress);
            };
        }
    });
    angular.module("app").component("spinBox", {
        bindings: {
            ngModel: "=",
            interactive: "<",
            min: "<",
            max: "<"
        },
        templateUrl: "Scripts/App/Components/spinBox.html",
        controller: function($timeout) {
            var $ctrl = this;
            var maxRange = 9999;
            var pressing, increments, timeout;
            $ctrl.$onInit = function() {
                $ctrl.min = Math.max(1, $ctrl.min || 1);
                $ctrl.max = Math.min(maxRange, $ctrl.max || maxRange);
                updateValue($ctrl.ngModel);
            };
            $ctrl.mouseDown = function(val) {
                updateValue($ctrl.ngModel + val);
                pressing = true;
                increments = 0;
                timeout = $timeout(function() {
                    increment(val);
                }, 1e3);
            };
            $ctrl.mouseUp = function() {
                $timeout.cancel(timeout);
                pressing = false;
            };
            function updateValue(val) {
                val = Number(val || 0);
                val = Math.max(val, $ctrl.min);
                val = Math.min(val, $ctrl.max);
                $ctrl.ngModel = val;
            }
            function increment(val) {
                if (!pressing) {
                    $timeout.cancel(timeout);
                    return;
                } else {
                    updateValue($ctrl.ngModel + val);
                    increments++;
                    var repeatTime = increments < 10 ? 200 : 60;
                    $timeout.cancel(timeout);
                    timeout = $timeout(function() {
                        increment(val);
                    }, repeatTime);
                }
            }
        }
    });
    angular.module("app").component("toggleSwitch", {
        bindings: {
            ngModel: "=",
            trueValue: "<",
            falseValue: "<"
        },
        templateUrl: "Scripts/App/Components/toggleSwitch.html",
        controller: function() {
            var $ctrl = this;
            $ctrl.toggle = function() {
                if ($ctrl.trueValue && _.isEqual($ctrl.trueValue, $ctrl.ngModel) || !$ctrl.trueValue && $ctrl.ngModel) $ctrl.ngModel = $ctrl.falseValue || false; else {
                    $ctrl.ngModel = $ctrl.trueValue || true;
                }
            };
        }
    });
    angular.module("app").directive("actionBar", function($timeout, $window) {
        return {
            restrict: "A",
            link: function(scope, element, attrs) {
                var calc = function() {
                    $timeout(function() {
                        var headerDiv = element;
                        var leftDiv = headerDiv.find(".header-left");
                        var rightDiv = headerDiv.find(".header-right");
                        var middleDiv = headerDiv.find(".header-middle");
                        var totalWidth = headerDiv.width();
                        var mid = totalWidth / 2;
                        var leftSpace = mid - leftDiv.width();
                        var rightSpace = mid - rightDiv.width();
                        var min = Math.min(leftSpace, rightSpace);
                        var w = min * 2;
                        middleDiv.css("width", w + "px");
                    }, 100);
                };
                calc();
                angular.element($window).on("resize", calc);
                scope.$on("$destroy", function() {
                    angular.element($window).off("resize", calc);
                });
            }
        };
    });
    angular.module("app").directive("draggable", function() {
        return {
            restrict: "A",
            require: [ "^ngModel", "^toggleSwitch" ],
            scope: {
                disabled: "@"
            },
            link: function(scope, element, attr, controllers) {
                var ngModel = controllers[0];
                var trueValue = controllers[1].trueValue;
                var falseValue = controllers[1].falseValue;
                var startTouch, startLeft, parentWidth = parseInt(window.getComputedStyle(element[0].parentElement).getPropertyValue("width")), maxLeft = parentWidth - parseInt(window.getComputedStyle(element[0]).getPropertyValue("width")), halfway = maxLeft / 2;
                if (element.parents("button").length) {
                    angular.element(element.parents("button")[0]).bind("tap click", function(event) {
                        click();
                    });
                }
                ngModel.$render = function() {
                    if (trueValue && _.isEqual(trueValue, ngModel.$modelValue) || !trueValue && ngModel.$modelValue) {
                        element[0].style["left"] = maxLeft + "px";
                    } else {
                        element[0].style["left"] = 0 + "px";
                    }
                };
                var getClientX = function(e) {
                    return e.touches ? e.touches[0].clientX : e.clientX;
                };
                var dragging = function(e) {
                    var offset = startTouch - getClientX(e);
                    var left = startLeft - offset;
                    left = Math.min(left, maxLeft);
                    left = Math.max(left, 0);
                    element[0].style["left"] = left + "px";
                };
                var click = function(e) {
                    if (trueValue && _.isEqual(trueValue, ngModel.$modelValue) || !trueValue && ngModel.$modelValue) {
                        element[0].style["left"] = 0 + "px";
                        ngModel.$setViewValue(falseValue || false);
                    } else {
                        element[0].style["left"] = maxLeft + "px";
                        ngModel.$setViewValue(trueValue || true);
                    }
                };
                var dragEnd = function(e) {
                    document.removeEventListener("mouseup", dragEnd, false);
                    document.removeEventListener("mousemove", dragging, false);
                    document.removeEventListener("touchend", dragEnd, false);
                    document.removeEventListener("touchmove", dragging, false);
                    element.removeClass("no-transition");
                    element.removeClass("pressed");
                    var endTouch = e.touches ? e.changedTouches[event.changedTouches.length - 1].clientX : e.clientX;
                    var newLeft = parseInt(element[0].style["left"]);
                    if (startTouch === endTouch) {
                        click(e);
                    } else {
                        if (newLeft >= halfway) {
                            element[0].style["left"] = maxLeft + "px";
                            ngModel.$setViewValue(trueValue || true);
                        } else {
                            element[0].style["left"] = 0 + "px";
                            ngModel.$setViewValue(falseValue || false);
                        }
                    }
                };
                var dragStart = function(e) {
                    startTouch = getClientX(e);
                    startLeft = parseInt(element[0].style["left"]);
                    element.addClass("no-transition");
                    element.addClass("pressed");
                    document.addEventListener("mouseup", dragEnd, false);
                    document.addEventListener("mousemove", dragging, false);
                    document.addEventListener("touchend", dragEnd, false);
                    document.addEventListener("touchmove", dragging, false);
                    if (e.stopPropagation) e.stopPropagation();
                    if (e.preventDefault) e.preventDefault();
                    e.cancelBubble = true;
                    e.returnValue = false;
                };
                var grabber = element[0];
                grabber.ondragstart = function() {
                    return false;
                };
                var down = function(e) {
                    var disabled = scope.disabled === "true";
                    if (!disabled && (e.which === 1 || e.touches)) {
                        dragStart(e);
                    }
                };
                var cancel = function(e) {
                    e.stopPropagation();
                    e.preventDefault();
                };
                grabber.addEventListener("mousedown", down, false);
                grabber.addEventListener("touchstart", down, false);
                grabber.addEventListener("click", cancel, false);
                element.on("$destroy", function() {
                    grabber.removeEventListener("mousedown", down, false);
                    grabber.removeEventListener("touchstart", down, false);
                    grabber.removeEventListener("click", cancel, false);
                });
            }
        };
    });
    angular.module("app").directive("editableField", editableField);
    function editableField($rootScope, $parse, $document, $timeout, strings) {
        function link(scope, element, attrs) {
            scope.doGetCaretPosition = function(oField) {
                var iCaretPos = 0;
                if (document.selection) {
                    oField.focus();
                    var oSel = document.selection.createRange();
                    oSel.moveStart("character", -oField.value.length);
                    iCaretPos = oSel.text.length;
                } else if (oField.selectionStart || oField.selectionStart == "0") iCaretPos = oField.selectionStart;
                return iCaretPos;
            };
            scope.getCursorPos = function($event) {
                var myEl = $event.target;
                var cursorPosValscope = scope.doGetCaretPosition(myEl);
                scope.doSetCaretPosition(myEl, cursorPosValscope);
            };
            scope.doSetCaretPosition = function(oField, iCaretPos) {
                if (document.selection) {
                    oField.focus();
                    var oSel = document.selection.createRange();
                    oSel.moveStart("character", -oField.value.length);
                    oSel.moveStart("character", iCaretPos - 1);
                    oSel.moveEnd("character", iCaretPos);
                    oSel.select();
                } else if (oField.selectionStart || oField.selectionStart == "0") {
                    oField.selectionStart = iCaretPos;
                    oField.selectionEnd = iCaretPos;
                    oField.focus();
                }
            };
            scope.displayText = function() {
                if (scope.isPassword) {
                    return scope.displayTextAsPassword();
                } else if (!scope.displayFormat) {
                    return scope.displayTextWithoutFormat();
                } else {
                    var text = strings[scope.displayFormat];
                    if (!text) {
                        return scope.displayTextWithoutFormat();
                    }
                    text = text.replace("{0}", scope.name);
                    text = text.replace("{1}", scope.ext);
                    return text;
                }
            };
            scope.displayTextWithoutFormat = function() {
                if (!scope.ext) {
                    return scope.name;
                } else {
                    return scope.name + scope.ext;
                }
            };
            scope.displayTextAsPassword = function() {
                var text = scope.displayTextWithoutFormat();
                if (!text) {
                    return null;
                }
                return "•".repeat(text.length);
            };
            scope.fieldType = function() {
                if (scope.isPassword) {
                    return "password";
                } else {
                    return "text";
                }
            };
            element.closest("button").on("tap click focus", function(event) {
                element.find("input")[0].focus();
                scope.getCursorPos(event);
                if ($(event.target).parents(".wrapper").length > 0 && (event.type == "click" || event.type == "focus")) {
                    event.stopPropagation();
                    event.preventDefault();
                    return;
                }
                if (!event.isDefaultPrevented() && !scope.locked) {
                    var alreadyEditing = scope.editing;
                    $timeout(function() {
                        scope.editing = true;
                        scope.updateCss(true);
                    });
                    $timeout(function() {
                        element.find("input")[0].focus();
                        if (!alreadyEditing) element.find("input")[0].select();
                        scope.getCursorPos(event);
                    }, 300);
                    $document.off("tap click", outsideClick);
                    $document.on("tap click", outsideClick);
                    element.find("input").off("blur", outsideClick);
                    element.find("input").on("blur", outsideClick);
                    event.stopPropagation();
                    event.preventDefault();
                }
            });
            scope.updateCss = function(edit) {
                if (edit) {
                    element.find("input").css("box-shadow", "none");
                    element.find("span#_glyph").addClass("option-text");
                    element.find("span#_subject").addClass("option-text");
                } else {
                    element.find("span#_glyph").removeClass("option-text");
                    element.find("span#_subject").removeClass("option-text");
                }
            };
            scope.handleKeyEnter = function(key) {
                if (key.keyCode == 13) {
                    document.activeElement.blur();
                    $document.off("tap click", outsideClick);
                    scope.editing = false;
                    scope.updateCss(false);
                    if (typeof EIP_CloseEmbeddedKeyboard == "function") {
                        EIP_CloseEmbeddedKeyboard();
                    }
                    event.stopPropagation();
                    event.preventDefault();
                    return;
                }
            };
            var outsideClick = function() {
                window.scrollTo(0, -100);
                $(".scroll-container").scrollTop(0);
                $timeout(function() {
                    $document.off("tap click", outsideClick);
                    $(this).off("blur", outsideClick);
                    scope.editing = false;
                    scope.updateCss(false);
                    if (typeof EIP_CloseEmbeddedKeyboard == "function") {
                        EIP_CloseEmbeddedKeyboard();
                    }
                });
            };
            element.on("$destroy", function() {
                $document.off("tap click", outsideClick);
                element.find("input").off("blur", outsideClick);
            });
        }
        return {
            link: link,
            restrict: "E",
            scope: {
                name: "=",
                ext: "@",
                locked: "<",
                subject: "@",
                subjectlabel: "@",
                placeholder: "@",
                displayFormat: "@"
            },
            template: '<form name="filename">' + '<input type="{{fieldType()}}" name="flname" ng-show="editing"  xas-placeholder="{{placeholder}}" ng-readonly="!editing" maxlength="1000" class="editable-field-input option-text" ng-model="name" required ng-keydown="handleKeyEnter($event)" spellCheck="false" tabindex="-1">' + '<span id="_glyph" class="xrx-paperclip" style="line-height:100%" ng-if="!subject"></span>' + '<span id="_subject" class="emailSubject" xas-string="{{subjectlabel ? subjectlabel : \'SDE_SUBJECT3\'}}" ng-if="subject && !editing && name" style="vertical-align:middle"></span>' + '<span ng-hide="editing || name"  class="editable-field-label" xas-string="{{placeholder}}" style="font-weight: 100;"></span>' + '<span ng-hide="editing || !name" class="editable-field-label">' + '<span ng-bind="displayText()"></span>' + "</span>" + "</form>"
        };
    }
    angular.module("app").directive("ngScrollable", ngScrollable);
    function ngScrollable($rootScope, $window, $timeout, $parse, $interval, device) {
        var directive = {
            link: function(scope, element, attrs) {
                if (!device.isThirdGenBrowser && device.generation >= 9) {
                    link(scope, element, attrs);
                } else {
                    if (attrs.scrollY !== "false") {
                        element.css("overflowY", "auto");
                        element.css("position", "relative");
                        scope.$$shadowDiv = $("<div class='shadow' style='position:fixed;'></div>");
                        element.append(scope.$$shadowDiv);
                        $timeout(function() {
                            var offSet = element.offset();
                            var borderTop = parseInt(element.css("border-top-width"));
                            var borderLeft = parseInt(element.css("border-left-width"));
                            scope.$$shadowDiv.css("top", offSet.top + borderTop);
                            scope.$$shadowDiv.css("left", offSet.left + borderLeft);
                            scope.$$shadowDiv.css("height", element[0].clientHeight);
                            scope.$$shadowDiv.css("width", element[0].clientWidth);
                            if (element.innerHeight() < element[0].scrollHeight) {
                                scope.$$shadowDiv.addClass("shadow-bottom");
                            }
                        }, 500);
                        element.scroll(function() {
                            $timeout(function() {
                                var movingHeight = element.children(":first").height();
                                var scrollTop = element.scrollTop();
                                var scrollableHeight = element.height();
                                var delta = movingHeight - scrollableHeight;
                                var atBottom = scrollTop >= delta ? true : false;
                                scope.$$shadowDiv.css("width", element[0].clientWidth);
                                scope.$$shadowDiv.css("height", element[0].clientHeight);
                                if (atBottom) {
                                    scope.$$shadowDiv.removeClass("shadow-bottom");
                                } else {
                                    scope.$$shadowDiv.addClass("shadow-bottom");
                                }
                                if (scrollTop == 0) {
                                    scope.$$shadowDiv.removeClass("shadow-top");
                                } else {
                                    scope.$$shadowDiv.addClass("shadow-top");
                                }
                            });
                        });
                    }
                }
            },
            restrict: "A",
            priority: 99,
            scope: {
                ngScrollable: "<",
                bounce: "@",
                disableMouse: "@",
                disablePointer: "@",
                disableTouch: "@",
                freeScroll: "@",
                hwCompositing: "@",
                momentum: "@",
                mouseWheel: "@",
                preventDefault: "@",
                probeType: "@",
                scrollbars: "@",
                scrollX: "@",
                scrollY: "@",
                tap: "@",
                useTransform: "@",
                useTransition: "@"
            }
        };
        return directive;
        function link(scope, element, attrs) {
            if (!!scope.ngScrollable) {
                scope.$$config = scope.ngScrollable;
                scope.$scrollEnd = $parse(scope.$$config.scrollEnd);
            }
            var contentDiv = element[0].classList.add("ninth-gen");
            scope.$wrapperHeight = angular.element(element).height();
            scope.scroller = new IScroll(element[0], {
                bounce: scope.bounce === "true",
                disableMouse: scope.disableMouse === "true",
                disablePointer: scope.disablePointer === "true",
                disableTouch: scope.disableTouch !== "false",
                freeScroll: scope.freeScroll === "true",
                HWCompositing: scope.hwCompositing === "true",
                momentum: scope.momentum !== "false",
                mouseWheel: scope.mouseWheel !== "false",
                preventDefault: scope.preventDefault !== "false",
                probeType: scope.probeType ? parseInt(scope.probeType, 10) : 1,
                scrollbars: "custom",
                scrollX: scope.scrollX === "true",
                scrollY: scope.scrollY !== "false",
                tap: scope.tap !== "false",
                useTransform: scope.useTransform !== "false",
                useTransition: scope.useTransition === "true"
            });
            scope.$$shadowDiv = $("<div class='shadow'></div>");
            if (scope.scroller.maxScrollY != 0) {
                scope.$$shadowDiv.addClass("shadow-bottom");
            }
            element.append(scope.$$shadowDiv);
            scope.scroller.on("scrollStart", function() {
                if (this.maxScrollY != 0) {
                    scope.$$shadowDiv.addClass("shadow-bottom");
                    scope.$$shadowDiv.addClass("shadow-top");
                }
            });
            scope.scroller.on("scrollEnd", function() {
                if (this.maxScrollY != 0) {
                    if (this.y == this.maxScrollY) {
                        scope.$$shadowDiv.removeClass("shadow-bottom");
                    }
                    if (this.y == 0) {
                        scope.$$shadowDiv.removeClass("shadow-top");
                    }
                }
                if (this.y == this.maxScrollY && scope.$scrollEnd && this.y != scope.currentY) {
                    scope.$apply(function() {
                        scope.$scrollEnd(scope);
                    });
                }
                scope.currentY = this.y;
            });
            if (scope.$$config && scope.$$config.watchHeight) {
                scope.$heightWatcher = $interval(function() {
                    var currentHeight = angular.element(element.find("div").first()).height();
                    var windowHeight = $(window).height();
                    if (currentHeight != scope.$wrapperHeight || windowHeight != scope.$windowHeight) {
                        updateViewport(scope, element, scope.scroller);
                        scope.scroller.refresh();
                        if (scope.scroller.maxScrollY != 0) {
                            scope.$$shadowDiv.addClass("shadow-bottom");
                        } else {
                            scope.$$shadowDiv.removeClass("shadow-bottom");
                        }
                        if (scope.scroller.y == 0) {
                            scope.$$shadowDiv.removeClass("shadow-top");
                        }
                        if (currentHeight != scope.$wrapperHeight) scope.$wrapperHeight = currentHeight;
                        if (windowHeight != scope.$windowHeight) scope.$windowHeight = windowHeight;
                    }
                }, 100);
            }
            angular.element(element[0]).css("position", "relative");
            scope.$$localPopoverId = element.closest("popover").attr("id");
            element.addClass("wrapper");
            scope.$viewVisible = scope.$on("$viewVisible", function(key, value) {
                scope.$applyAsync(function() {
                    updateViewport(scope, element, scope.scroller);
                    scope.scroller.refresh();
                });
            });
            scope.$popoverVisible = scope.$on("$popoverVisible", function(key, value) {
                if (scope.$$localPopoverId === value.id) {
                    updateViewport(scope, element, scope.scroller);
                    scope.scroller.refresh();
                }
            });
            scope.$viewWatcher = $rootScope.$on("$viewContentLoaded", function(sc) {
                $timeout(function() {
                    if (element.attr("ng-scrollable") != "") {
                        var localConfig = {};
                        localConfig.$$config = JSON.parse(element.attr("ng-scrollable"));
                        updateViewport(localConfig, element, scope.scroller);
                        scope.scroller.refresh();
                    }
                }, 100);
            });
            scope.$on("$destroy", function(s) {
                scope.$viewVisible();
                scope.$popoverVisible();
                scope.$viewWatcher();
                if (scope.$heightWatcher != null) $interval.cancel(scope.$heightWatcher);
            });
        }
    }
    function updateViewport(scope, element, scroller) {
        if (scope.$$config && scope.$$config.autoHeight) {
            var padding = scope.$$config.padding || 0;
            element.height(window.innerHeight - element.offset().top - padding);
        }
    }
    angular.module("app").directive("ngTap", ngTap).directive("ngTapClick", function($rootScope, $window, $parse, device) {
        return {
            restrict: "A",
            scope: {
                ngTapClick: "&"
            },
            link: function(scope, element, attrs) {
                if (!device.isThirdGenBrowser && device.generation >= 9) {
                    element.on("tap", function(e) {
                        scope.ngTapClick({
                            $event: e
                        });
                    });
                } else {
                    element.on("click", function(e) {
                        scope.$apply(scope.ngTapClick({
                            $event: e
                        }));
                    });
                }
            }
        };
    });
    function ngTap($rootScope, $window, $parse) {
        var directive = {
            link: link,
            restrict: "A",
            priority: 1
        };
        return directive;
        function link(scope, element, attrs) {
            var vmAction = $parse(attrs.ngTap);
            element[0].addEventListener("tap", function(e) {
                if (!element.hasClass("disabled")) {
                    if (!scope.$$phase) {
                        scope.$apply(function(s) {
                            vmAction(s, {
                                $event: e
                            });
                        });
                    } else {
                        scope.$applyAsync(function(s) {
                            vmAction(s, {
                                $event: e
                            });
                        });
                    }
                }
            }, false);
        }
    }
    angular.module("app").directive("numbersOnly", function() {
        return {
            require: [ "ngModel", "^spinBox" ],
            link: function(scope, element, attrs, controllers) {
                var modelCtrl = controllers[0];
                var min = controllers[1].min;
                var max = controllers[1].max;
                modelCtrl.$parsers.push(function(inputValue) {
                    if (inputValue === undefined) {
                        return "0";
                    }
                    var transformedInput = inputValue.replace(/[^0-9]/g, "");
                    transformedInput = parseInt(transformedInput || "0", 10);
                    transformedInput = Math.max(transformedInput, min);
                    transformedInput = Math.min(transformedInput, max);
                    modelCtrl.$setViewValue(transformedInput.toString());
                    modelCtrl.$render();
                    return Number(transformedInput);
                });
            }
        };
    });
    var currentTextField = null;
    angular.module("app").directive("textField", textField);
    function textField($document, $timeout, device) {
        var directive = {
            link: link,
            restrict: "E",
            scope: {
                name: "=",
                placeholder: "@",
                type: "@",
                styles: "@"
            },
            transclude: true,
            template: '<ng-transclude ng-show="editing" class="{{styles}}"></ng-transclude>' + '<div class="textField text-medium" style="font-weight:300;" ng-bind="placeholder" ng-hide="name || editing">' + '</div><div class="textField text-medium" ng-bind="name" ng-show="name && !editing && (type != \'password\')">' + '</div><div class="textField text-medium" ng-bind="name | passwordMask" ng-show="name && !editing && (type == \'password\')"></div>'
        };
        return directive;
        function link(scope, element, attrs) {
            scope.handleKeyEnter = function(key) {
                if (key.keyCode == 13) {
                    event.stopPropagation();
                    event.preventDefault();
                    $timeout(outsideClick, 100);
                    return false;
                }
            };
            element.find("input").attr("readonly", true);
            element.find("input").on("keydown", scope.handleKeyEnter);
            element.on("tap click", function(event) {
                currentTextField = element;
                if ($(event.target).parents(".wrapper").length > 0 && event.type == "click") {
                    event.stopPropagation();
                    event.preventDefault();
                    return;
                }
                element.find("input").removeAttr("readonly");
                if (!event.isDefaultPrevented() && !scope.locked) {
                    var alreadyEditing = scope.editing;
                    scrollTextFieldIntoView();
                    $timeout(function() {
                        scope.$apply(function() {
                            scope.editing = true;
                        });
                    }, 50);
                    $timeout(function() {
                        element.find("input")[0].focus();
                        if (!alreadyEditing) element.find("input")[0].select();
                    }, 200);
                    $document.off("tap click", outsideClick);
                    $document.on("tap click", outsideClick);
                    element.find("input").off("blur", outsideClick);
                    element.find("input").on("blur", outsideClick);
                    event.stopPropagation();
                    event.preventDefault();
                }
            });
            var scrollTextFieldIntoView = function() {
                if (window._iScrolls) {
                    if (window._iScrolls.length > 0) {
                        window._iScrolls[window._iScrolls.length - 1].scrollToElement(element[0], null, 0, -15);
                        $timeout(function() {
                            window._iScrolls[window._iScrolls.length - 1]._execEvent("scrollStart");
                            window._iScrolls[window._iScrolls.length - 1]._execEvent("scrollEnd");
                        }, 50);
                    }
                } else {
                    var scrollContainer = element.closest("div[ng-scrollable]")[0];
                    if (window.innerHeight == 480) {
                        $(scrollContainer).find(".eighth-gen-keyboard-spacer").addClass("show");
                    }
                    if ($(scrollContainer).find(element[0]).length > 0) {
                        var inputContainer = element;
                        while (inputContainer.position().top == 0) {
                            inputContainer = inputContainer.parent();
                        }
                        if (Math.round(inputContainer.position().top) != 43 && Math.round(inputContainer.position().top) != 65) {
                            scrollContainer.scrollTop += inputContainer.position().top - 43;
                        }
                    }
                }
            };
            var outsideClick = function() {
                if (!device.isEighthGen) {
                    var elementName = $(element[0]).attr("name");
                    var currentTextFieldName = $(currentTextField[0]).attr("name");
                    if (elementName === currentTextFieldName) {
                        var scrollContainer = element.closest("div[ng-scrollable]")[0];
                        scrollContainer.scrollTop = 0;
                    }
                }
                $document.off("tap click", outsideClick);
                $(this).off("blur", outsideClick);
                element.find("input").attr("readonly", true);
                scope.editing = false;
                scope.$apply();
                $timeout(function() {
                    if (typeof EIP_CloseEmbeddedKeyboard == "function") {
                        EIP_CloseEmbeddedKeyboard();
                    }
                });
            };
            element.on("$destroy", function() {
                $document.off("tap click", outsideClick);
                element.find("input").off("blur", outsideClick);
            });
        }
    }
    angular.module("app").directive("xasCompareTo", function() {
        return {
            restrict: "A",
            require: "ngModel",
            scope: {
                otherModelValue: "=xasCompareTo"
            },
            link: function(scope, element, attributes, ngModel) {
                ngModel.$validators.compareTo = function(modelValue) {
                    return modelValue == scope.otherModelValue;
                };
                scope.$watch("otherModelValue", function() {
                    ngModel.$validate();
                });
            }
        };
    });
    angular.module("app").directive("xasInputTab", xasInputTab);
    function xasInputTab() {
        var directive = {
            link: link,
            restrict: "A",
            scope: {
                preventSubmit: "<"
            }
        };
        return directive;
        function link(scope, element, attrs) {
            var onKeyPress = function(e) {
                if (e.keyCode == "13") {
                    var focusedIndex = -1;
                    var textInputs = element.find("input[type=text], input[type=email], input[type=password]");
                    var focusedInput = document.activeElement;
                    if (focusedInput) {
                        focusedIndex = _.findIndex(textInputs, function(textInput) {
                            return textInput.id === focusedInput.id;
                        });
                        if (focusedIndex > -1) {
                            if ($(focusedInput).hasClass("ng-invalid") && $(focusedInput).hasClass("ng-not-empty")) {
                                focusedInput.blur();
                                $(focusedInput).closest("text-field").trigger("tap");
                                e.preventDefault();
                            }
                            if (focusedIndex < textInputs.length - 1) {
                                $(textInputs[focusedIndex + 1]).closest("text-field").trigger("tap");
                                e.preventDefault();
                            } else {
                                textInputs[focusedIndex].blur();
                                if (typeof EIP_CloseEmbeddedKeyboard == "function") {
                                    EIP_CloseEmbeddedKeyboard();
                                }
                                if (scope.preventSubmit) e.preventDefault();
                            }
                        }
                    }
                }
            };
            angular.element(element).on("keypress", onKeyPress);
            scope.$on("$destroy", function() {
                angular.element(element).off("keypress", onKeyPress);
            });
        }
    }
    angular.module("app").directive("xasPlaceholder", xasPlaceholder);
    function xasPlaceholder(strings) {
        var directive = {
            link: link,
            restrict: "A",
            scope: {
                xasPlaceholder: "@"
            }
        };
        return directive;
        function link(scope, element, attrs) {
            attrs.$observe("xasPlaceholder", function(value) {
                var string = strings[value];
                attrs.$set("placeholder", string || value);
            });
            attrs.$set("placeholder", strings[attrs.xasPlaceholder] || attrs.xasPlaceholder);
            var onFocus = function(e) {
                $(e.target).addClass("keepPlaceHolder");
            };
            var onBlur = function(e) {
                $(e.target).removeClass("keepPlaceHolder");
                $(e.target).removeClass("removePlaceholder");
            };
            var onKeyPress = function(e) {
                if (e.target.value != null) {
                    $(e.target).addClass("removePlaceholder");
                    $(e.target).removeClass("keepPlaceHolder");
                }
            };
            angular.element(element).on("focus", onFocus);
            angular.element(element).on("blur", onBlur);
            angular.element(element).on("input", onKeyPress);
            scope.$on("$destroy", function() {
                angular.element(element).off("focus", onFocus);
                angular.element(element).off("blur", onBlur);
                angular.element(element).off("input", onKeyPress);
            });
        }
    }
    angular.module("app").directive("xasStopEvent", function() {
        return {
            restrict: "A",
            link: function(scope, element, attr) {
                element.bind("tap", function(e) {
                    if (e.target === this) e.stopPropagation();
                });
                element.bind("click", function(e) {
                    if (e.target === this) e.stopPropagation();
                });
            }
        };
    });
    angular.module("app").directive("xasString", function(strings) {
        return {
            restrict: "A",
            scope: {
                xasString: "@",
                formatValues: "@"
            },
            link: function(scope, element, attrs) {
                scope.$watch(function() {
                    return [ attrs.xasString, attrs.formatValues ];
                }, replaceString, true);
                function replaceString() {
                    var string = strings[attrs.xasString] || attrs.xasString;
                    if (string && attrs.formatValues) {
                        var formatString = scope.$eval(attrs.formatValues);
                        if (!Array.isArray(formatString)) formatString = [ formatString ];
                        var matches = string.match(/\{(\d)\}/g);
                        if (matches.length !== formatString.length) throw "Format string length mismatch between " + attrs.xasString + " and " + attrs.formatValues;
                        _.each(matches, function(item, index) {
                            var fv = formatString[index].toString().trim();
                            fv = strings[fv] || fv;
                            string = string.replace(item, fv);
                        });
                    }
                    element.html(string);
                }
            }
        };
    });
    angular.module("app").directive("xrxShowRemoteAlert", function($rootScope, $parse, $document, $timeout, $window, $http, $uibModal) {
        function link(scope, element, attrs) {
            scope.buttonTitle = attrs.buttontitle;
            scope.modalUrl = attrs.modalurl;
            var alertHtml = "";
            var modalObj = null;
            function showModal() {
                $("#divPrivacyMessage").html(alertHtml);
                $("#mainForm,.mainForm").hide();
                $("#divPrivacyNotes").show();
            }
            function ctrlObj($scope, $uibModalInstance) {
                $scope.cancel = function() {
                    $uibModalInstance.dismiss("cancel");
                };
            }
            function closeModal() {
                modalObj.close();
            }
            $http.get(scope.modalUrl).then(function(result) {
                if (result != null && result != undefined && result.data != null && result.data != undefined) {
                    var html = result.data;
                    if (html.replace(/\s/g, "").startsWith("<xrxShowRemoteAlertContent/>")) {
                        html = html.replace("<xrxShowRemoteAlertContent />", "").replace("<xrxShowRemoteAlertContent/>", "").replace("<xrxShowRemoteAlertContent/ >", "").replace("<xrxShowRemoteAlertContent / >", "");
                        alertHtml = html;
                        $(".xrxShowRemoteAlertClss").show();
                        $("#xrxShowRemoteAlertButton").click(function() {
                            showModal();
                        });
                    }
                }
            }).catch(function(s) {});
        }
        return {
            link: link,
            restrict: "E",
            scope: {
                buttonTitle: "@",
                modalUrl: "@"
            },
            template: "<button class='btn btn-medium xrxShowRemoteAlertClss' id='xrxShowRemoteAlertButton' xas-string='{{buttonTitle}}' tabindex='-1' type='button'></button>"
        };
    });
    angular.module("app").filter("parseDeviceConfig", function() {
        return function(envelope) {
            var doc = xrxStringToDom(envelope);
            var el = xrxFindElement(doc, [ "DeviceInformationResponse", "Information" ]);
            var rawInfo = xrxGetValue(el);
            var info, device, style;
            if (rawInfo.length < 4096) {
                info = xrxStringToDom(rawInfo);
                device = xrxFindElement(info, [ "DeviceInformation", "device" ]);
                style = xrxFindElement(info, [ "DeviceInformation", "style" ]);
            } else {
                device = xrxStringToDom("<?xml version='1.0' encoding='UTF-8'?><device>" + rawInfo.split("<device>")[1].split("</device>")[0] + "</device>");
                style = xrxStringToDom("<?xml version='1.0' encoding='UTF-8'?><style>" + rawInfo.split("<style>")[1].split("</style>")[0] + "</style>");
            }
            var major = $(rawInfo).find("eipSoftware > majorVersion").text();
            var minor = $(rawInfo).find("eipSoftware > minorVersion").text();
            var revision = $(rawInfo).find("eipSoftware > revision").text();
            return {
                xml: xrxDomToString(device),
                deviceName: xrxGetValue(xrxFindElement(device, [ "name" ])),
                macAddress: xrxGetValue(xrxFindElement(device, [ "mac" ])),
                serialNumber: xrxGetValue(xrxFindElement(device, [ "serial" ])),
                modelName: xrxGetValue(xrxFindElement(device, [ "model" ])),
                eipMajorVersion: major,
                eipMinorVersion: minor,
                eipRevision: revision,
                hasSNMPWS: $(rawInfo).find("SNMPWS").length > 0,
                generation: xrxGetValue(xrxFindElement(style, [ "generation" ])),
                eipVersion: parseFloat(major + "." + minor + "." + revision)
            };
        };
    });
    angular.module("app").filter("parseSnmp", function() {
        return function(snmp) {
            var doc = xrxStringToDom(snmp);
            var el = xrxFindElement(doc, [ "returnValue" ]);
            var result = xrxGetValue(el);
            return {
                value: result
            };
        };
    });
    angular.module("app").filter("orderObjectBy", function() {
        return function(items, field, reverse) {
            var filtered = [];
            angular.forEach(items, function(item) {
                filtered.push(item);
            });
            filtered.sort(function(a, b) {
                return a[field] > b[field] ? 1 : -1;
            });
            if (reverse) filtered.reverse();
            return filtered;
        };
    });
    angular.module("app").filter("error", function() {
        return function(errorResponse) {
            var errorDetails = {};
            var errorString = errorResponse.match(/<faultstring>(.*)<\/faultstring>/);
            var detail = errorResponse.match(/<detail(.*)<\/detail>/);
            if (detail) {
                var doc = xrxStringToDom(detail[0]);
                var webletElement = xrxFindElement(doc, [ "WebletModificationDisabledException" ]);
                var authElement = xrxFindElement(doc, [ "FailedAuthenticationException" ]) || xrxFindElement(doc, [ "FailedAuthentication" ]);
                var regFullElement = xrxFindElement(doc, [ "RegistryFullException" ]);
                if (webletElement) {
                    errorDetails.exceptionType = "WebletModificationDisabledException";
                    errorDetails.exceptionMessage = "SDE_INSTALLATION_CONNECTKEY_APPS";
                } else if (authElement) {
                    errorDetails.exceptionType = "FailedAuthenticationException";
                    errorDetails.exceptionMessage = "SDE_DEVICE_ADMINISTRATOR_USERNAME";
                } else if (regFullElement) {
                    errorDetails.exceptionType = "RegistryFullException";
                    errorDetails.exceptionMessage = "SDE_MAXIMUM_NUMBER_APPS";
                }
            }
            return errorDetails;
        };
    });
    angular.module("app").filter("parseDeviceCapabilities", function() {
        return function(envelope) {
            var deviceCaps = [];
            var deviceCapabilites = xrxDeviceConfigParseGetDeviceCapabilities(envelope);
            var deviceJobProcessingCaps = xrxGetTheElement(deviceCapabilites, "DeviceJobProcessingCapabilities");
            var deviceCapsByService = xrxGetTheElement(deviceJobProcessingCaps, "DeviceJobProcessingCapabilitiesByServices");
            if (deviceCapsByService != null) {
                var capsByService = xrxFindElements(deviceCapsByService, "CapabilitiesByService");
                _.forEach(capsByService, function(capByService) {
                    var serviceType = xrxGetElementValue(capByService, "ServiceType").toLowerCase();
                    switch (serviceType) {
                      case "copy":
                        deviceCaps.push("Copy");
                        break;

                      case "workflowscanning":
                        deviceCaps.push("Scan");
                        break;

                      case "internetfaxsend":
                      case "faxsend":
                        if (_.indexOf(deviceCaps, "Fax") < 0) deviceCaps.push("Fax");
                        break;

                      case "print":
                        deviceCaps.push("Print");
                        break;
                    }
                });
            }
            return deviceCaps;
        };
    });
    angular.module("app").filter("parseDevicePrintCapabilities", function() {
        return function(envelope) {
            var deviceCaps = [];
            var deviceCapabilites = xrxDeviceConfigParseGetDeviceCapabilities(envelope);
            var deviceJobProcessingCaps = xrxGetTheElement(deviceCapabilites, "DeviceJobProcessingCapabilities");
            var deviceCapsByService = xrxGetTheElement(deviceJobProcessingCaps, "DeviceJobProcessingCapabilitiesByServices");
            if (deviceCapsByService != null) {
                var capsByService = xrxFindElements(deviceCapsByService, "CapabilitiesByService");
                _.forEach(capsByService, function(capByService) {
                    var serviceType = xrxGetElementValue(capByService, "ServiceType").toLowerCase();
                    switch (serviceType) {
                      case "print":
                        var printCap = xrxGetTheElement(capByService, "DeviceJobProcessingCapabilities");
                        var input = xrxGetTheElement(printCap, "Input");
                        var pdl = xrxGetTheElement(input, "PDLCapabilities");
                        var pdlSupported = xrxGetTheElement(pdl, "PDLSupported");
                        var values = xrxFindElements(pdlSupported, "AllowedValue");
                        _.forEach(values, function(ele) {
                            var value = xrxGetValue(ele).toLowerCase();
                            deviceCaps.push(value);
                        });
                        break;
                    }
                });
            }
            return deviceCaps;
        };
    });
    angular.module("app").filter("isUserDeviceAdmin", function() {
        return function(envelope) {
            var parsedSessionInfo = xrxSessionParseGetSessionInfo(envelope);
            if (parsedSessionInfo != null) {
                var rolesElement = xrxGetTheElement(parsedSessionInfo, "roles");
                if (rolesElement != null) {
                    var authorizedElement = xrxGetTheElement(rolesElement, "authorized");
                    if (authorizedElement != null) {
                        var rolesAuthorizedRoleElements = xrxFindElements(authorizedElement, "role");
                        if (rolesAuthorizedRoleElements != null) {
                            var indexOfAdminRole = _.findIndex(rolesAuthorizedRoleElements, function(o) {
                                return xrxGetElementValue(o, "role").toLowerCase() == "xesystemadministrator";
                            });
                            if (indexOfAdminRole > -1) {
                                return true;
                            }
                        }
                    }
                }
            }
            return false;
        };
    });
    angular.module("app").filter("convertProtocol", function() {
        return function(protocol) {
            var result = "";
            switch (protocol) {
              case "to":
                result = "SDE_TO5";
                break;

              case "cc":
                result = "SDE_CC1";
                break;

              case "bcc":
                result = "SDE_BCC1";
                break;

              default:
                result = "SDE_TO5";
            }
            return result;
        };
    });
    angular.module("app").filter("passwordMask", function() {
        return function(input) {
            var result = "";
            if (input) {
                var split = input.split("");
                for (var i = 0; i < split.length; i++) {
                    result += "•";
                }
            }
            return result;
        };
    });
    angular.module("app").filter("stringFormat", function() {
        return function(input, params) {
            var str = input;
            if (!str) return input;
            _.each(str.match(/\{(\d)\}/g), function(item, index) {
                str = str.replace(item, params[index]);
            });
            return str;
        };
    });
    angular.module("app").filter("translate", function(strings) {
        return function(input) {
            var result = "";
            if (input) {
                result = strings[input] || input;
            }
            return result;
        };
    });
    angular.module("app").factory("scanTemplate", scanTemplate);
    function scanTemplate($location, apiService, logService) {
        var XRX_SCAN_TEMPLATE_RETURN = "\n\n\r";
        var templateTypes = {
            boolean: {
                values: [ "TRUE", "FALSE" ]
            },
            enum_autoexposure: {
                supportsSimpleValidation: true,
                values: [ "ON", "OFF" ]
            },
            enum_originalsubtype: {
                supportsSimpleValidation: true,
                values: [ "PRINTED_ORIGINAL" ]
            },
            integer: {
                validate: function(v) {
                    var pattern = /^[0-9]*$/;
                    return v.toString().match(pattern);
                },
                values: [ "NUMBER (integer)" ]
            },
            string: {
                format: function(v) {
                    return '"' + v + '"';
                }
            },
            enum_resolution: {
                supportsSimpleValidation: true,
                values: [ "RES_72X72", "RES_150X150", "RES_100X100", "RES_200X200", "RES_300X300", "RES_400X400", "RES_600X600" ]
            },
            enum_colormode: {
                supportsSimpleValidation: true,
                values: [ "AUTO", "BLACK_AND_WHITE", "GRAYSCALE", "FULL_COLOR" ]
            },
            enum_docformat: {
                supportsSimpleValidation: true,
                values: [ "XSM_TIFF_V6", "TIFF_V6", "JFIF_JPEG", "PDF", "PDF/A-1b", "XPS" ]
            },
            enum_inputorientation: {
                supportsSimpleValidation: true,
                values: [ "PORTRAIT", "LANDSCAPE" ]
            },
            enum_searchabletext: {
                supportsSimpleValidation: true,
                values: [ "IMAGE_ONLY", "SEARCHABLE_IMAGE" ]
            },
            enum_imagemode: {
                supportsSimpleValidation: true,
                values: [ "MIXED", "PHOTO", "TEXT", "MAP", "NEWSPAPER_AND_MAGAZINE" ]
            },
            enum_sided: {
                supportsSimpleValidation: true,
                values: [ "ONE_SIDED", "TWO_SIDED", "SECOND_SIDE_ROTATION" ]
            },
            enum_mediasize: {
                supportsSimpleValidation: true,
                values: [ "AUTO", "NA_5.5x7LEF", "NA_5.5x7SEF", "NA_5.5x8.5LEF", "NA_5.5x8.5SEF", "NA_8.5x11LEF", "NA_8.5x11SEF", "NA_8.5x13SEF", "NA_8.5x14SEF", "NA_11x17SEF", "ISO_A5LEF", "ISO_A5SEF", "ISO_A4LEF", "ISO_A4SEF", "ISO_A3SEF", "JIS_B4SEF", "JIS_B5LEF", "JIS_B5SEF" ]
            }
        };
        function validateAgainstArray(v, arr) {
            return arr.find(function(d) {
                return d === v;
            });
        }
        function scanTemplate(featureValues) {
            var scriptLocation = "/api/v1/jobs/scan";
            var repoName = location.host;
            this.docSection = _.clone(__docSec);
            this.destSection = _.clone(__destSec);
            this.generalSection = _.clone(__generalSection);
            this.scanSection = _.clone(__scanSection);
            this.sections = [ this.scanSection, this.generalSection, this.destSection, this.docSection ];
            var params = $location.search();
            logService.logMsg("scanTemplate => featureValues.jobid:" + featureValues.jobid, "information");
            var returnUrl = apiService.getPrefix() + scriptLocation + "?" + "jobId=" + featureValues.jobid;
            this.destSection.details.XrxHTTPScriptLocation.value = returnUrl;
            repoName = apiService.apiHost();
            this.destSection.details.DocumentPath.value = "/";
            this.destSection.details.RepositoryName.value = repoName;
            this.docSection.details.Resolution.value = featureValues.resolution;
            this.scanSection.details.SidesToScan.value = featureValues.plex;
            this.scanSection.details.InputOrientation.value = featureValues.orientation;
            this.scanSection.details.CompressionQuality.value = featureValues.quality;
            this.scanSection.details.ColorMode.value = featureValues.colorMode;
            this.scanSection.details.InputMediaSize.value = featureValues.mediaSize;
            this.scanSection.details.DocumentImageMode.value = featureValues.originalType;
            this.docSection.details.DocumentObjectName.value = featureValues.fileName;
            this.name = "Xerox_WNC" + new Date().getTime() + ".xst";
            this.generalSection.details.JobTemplateName.value = this.name;
        }
        scanTemplate.prototype.toString = function() {
            var _sectionStrings = [];
            for (var index = 0; index < this.sections.length; index++) {
                var section = this.sections[index];
                var sectionString = section.name + XRX_SCAN_TEMPLATE_RETURN;
                if (section.name == __destSec.name && section.details.constructor === Array) {
                    _.each(section.details, function(detail, index) {
                        sectionString += "file_" + (index + 1) + transformObjectToTemplateSection(detail);
                    });
                } else sectionString += transformObjectToTemplateSection(section.details);
                _sectionStrings.push(sectionString);
            }
            return _sectionStrings.join("end" + XRX_SCAN_TEMPLATE_RETURN) + "end" + XRX_SCAN_TEMPLATE_RETURN;
        };
        function transformObjectToTemplateSection(details) {
            var sectionString = "{" + XRX_SCAN_TEMPLATE_RETURN;
            _.keys(details).forEach(function(detail) {
                var typeName = details[detail].type;
                var typeValue = details[detail].value;
                var fun = templateTypes[typeName];
                if (fun) {
                    var validateFunction = fun.validate || (fun.supportsSimpleValidation && fun.supportsSimpleValidation == true ? validateAgainstArray : null);
                    if (validateFunction && !validateFunction(typeValue, fun.values)) throw new ScanTemplateFormatException(typeValue, detail, templateTypes[typeName].values);
                }
                if (fun && fun.format) {
                    typeValue = fun.format(typeValue);
                }
                sectionString += "\t" + typeName + " " + detail + " = " + typeValue + ";" + XRX_SCAN_TEMPLATE_RETURN;
            });
            sectionString += "}" + XRX_SCAN_TEMPLATE_RETURN;
            return sectionString;
        }
        function ScanTemplateFormatException(value, propName, acceptableValues) {
            this.value = value;
            this.acceptableValues = acceptableValues;
            this.propName = propName;
            this.toString = function() {
                return "The scan template is invalid. The property: " + propName + " is invalid. The acceptable values are: " + acceptableValues.join(",");
            };
        }
        var __scanSection = {
            name: "[service xrx_svc_scan]",
            details: {
                AutoContrast: {
                    type: "boolean",
                    value: "FALSE"
                },
                AutoExposure: {
                    type: "enum_autoexposure",
                    value: "OFF"
                },
                CompressionQuality: {
                    type: "integer",
                    value: 128
                },
                Darkness: {
                    type: "integer",
                    value: 0
                },
                Contrast: {
                    type: "integer",
                    value: 0
                },
                OriginalSubType: {
                    type: "enum_originalsubtype",
                    value: "PRINTED_ORIGINAL"
                },
                InputEdgeErase: {
                    type: "struct_borders",
                    value: "2/2/2/2/mm"
                },
                InputMediaSize: {
                    type: "enum_mediasize",
                    value: "AUTO"
                },
                InputOrientation: {
                    type: "enum_inputorientation",
                    value: "PORTRAIT"
                },
                Magnification: {
                    type: "struct_magnification",
                    value: "NONE"
                },
                Sharpness: {
                    type: "integer",
                    value: 0
                },
                Saturation: {
                    type: "integer",
                    value: 0
                },
                ColorMode: {
                    type: "enum_colormode",
                    value: "FULL_COLOR"
                },
                SidesToScan: {
                    type: "enum_sided",
                    value: "ONE_SIDED"
                },
                DocumentImageMode: {
                    type: "enum_imagemode",
                    value: "MIXED"
                },
                BlankPageRemoval: {
                    type: "enum_blankpageremoval",
                    value: "INCLUDE_ALL_PAGES"
                }
            }
        };
        var __generalSection = {
            name: "[service xrx_svc_general]",
            details: {
                DCSDefinitionUsed: {
                    type: "enum_DCS",
                    value: "DCS_GENERIC"
                },
                JobTemplateCharacterEncoding: {
                    type: "enum_encoding",
                    value: "UTF-8"
                },
                ConfirmationStage: {
                    type: "enum_confstage",
                    value: "AFTER_JOB_COMPLETE"
                },
                JobTemplateCreator: {
                    type: "string",
                    value: "scanTemplate.js"
                },
                SuppressJobLog: {
                    type: "boolean",
                    value: "TRUE"
                },
                JobTemplateLanguageVersion: {
                    type: "string",
                    value: "4.00.07"
                },
                JobTemplateName: {
                    type: "string",
                    value: ""
                },
                ConfirmationMethod: {
                    type: "enum_confmethod",
                    value: "NONE"
                }
            }
        };
        var __destSec = {
            name: "[service xrx_svc_file]",
            details: {
                RepositoryAlias: {
                    type: "string",
                    value: "AG_SCAN"
                },
                FilingProtocol: {
                    type: "enum_filingprotocol",
                    value: "XRXHTTP"
                },
                RepositoryVolume: {
                    type: "string",
                    value: ""
                },
                RepositoryName: {
                    type: "string",
                    value: ""
                },
                DocumentPath: {
                    type: "string",
                    value: ""
                },
                ServerValidationReq: {
                    type: "boolean",
                    value: "FALSE"
                },
                DocumentFilingPolicy: {
                    type: "enum_filingpolicy",
                    value: "NEW_AUTO_GENERATE"
                },
                XrxHTTPScriptLocation: {
                    type: "string",
                    value: ""
                },
                UserNetworkFilingLoginName: {
                    type: "string",
                    value: ""
                },
                UserNetworkFilingLoginID: {
                    type: "string",
                    value: ""
                }
            }
        };
        var __docSec = {
            name: "[doc_object xrx_document]",
            details: {
                DocumentFormat: {
                    type: "enum_docformat",
                    value: "PDF"
                },
                DocumentObjectName: {
                    type: "string",
                    value: "XeroxScan"
                },
                CompressionsSupported: {
                    type: "enum_compression",
                    value: "ANY"
                },
                MixedTypesSupported: {
                    type: "enum_mixedtype",
                    value: "MULTI_MASK_MRC, 3_LAYER_MRC"
                },
                MixedCompressionsSupported: {
                    type: "enum_mixedcompressions",
                    value: "ANY_BINARY, ANY_CONTONE"
                },
                Resolution: {
                    type: "enum_resolution",
                    value: "RES_300X300"
                },
                OutputImageSize: {
                    type: "enum_outputsize",
                    value: "SAME_AS_ORIGINAL"
                },
                UserData: {
                    type: "ref_invocation",
                    value: ""
                }
            }
        };
        return scanTemplate;
    }
    angular.module("app").factory("apiService", apiService);
    function apiService(configurationService) {
        var service = {};
        service.url = configurationService.getSetting("apiUrl");
        service.prefix = configurationService.getSetting("apiPrefix");
        service.apiBaseUrl = function() {
            console.log("Service URL" + service.url + service.getPrefix());
            return service.url + service.getPrefix();
        };
        service.apiUrl = function(fragment) {
            return service.apiBaseUrl() + fragment;
        };
        service.apiHost = function() {
            return service.url.replace("http://", "").replace("https://", "");
        };
        service.getPrefix = function() {
            if (!service.prefix || service.prefix == "null") {
                return "";
            }
            return service.prefix;
        };
        return service;
    }
    angular.module("app").factory("configurationService", configurationService);
    function configurationService($location, storageService) {
        var service = {};
        var storageProvider = storageService.getLocalStorage(true);
        service.parseUrlParams = function() {
            function fullyDecode(urlParam) {
                var result = urlParam;
                while (result !== decodeURIComponent(result)) {
                    result = decodeURIComponent(result);
                }
                return result;
            }
            var qs = window.location.search;
            if (!qs) {
                return $location.search();
            }
            var result = [];
            if (qs[0] === "?") {
                var params = qs.slice(1).split("&");
                for (var i = 0; i < params.length; i++) {
                    var param = params[i].split("=");
                    result.push(param[0]);
                    result[param[0]] = fullyDecode(param[1]);
                }
            }
            return result;
        };
        service.getSetting = function(settingName) {
            var params = service.parseUrlParams();
            var setting = params[settingName];
            if (setting) {
                service.cacheSetting(settingName, setting);
            } else {
                setting = storageProvider.getItem(settingName);
            }
            return setting;
        };
        service.cacheSetting = function(settingName, setting) {
            storageProvider.setItem(settingName, setting);
        };
        service.clearQueryString = function() {
            $location.search({});
        };
        return service;
    }
    angular.module("app").factory("errorHandlerService", errorHandlerService);
    function errorHandlerService($rootScope, modalService, strings) {
        var service = {};
        service.parseError = function(errorSDEName) {
            var localizedString = locStrings[errorSDEName];
            if (localizedString == null || localizedString.length == 0) {
                localizedString = errorSDEName;
            }
            return modalService.showAlert(localizedString);
        };
        service.showErrorAlert = function(sdeTitle, sdeAdditionalInfo, button1Callback, button2Callback) {
            service.closeAllModals();
            var data = {};
            data.title = sdeTitle;
            data.additionalInfo = sdeAdditionalInfo;
            data.button1Callback = button1Callback;
            data.button2Callback = button2Callback;
            return modalService.openComponentModal("generalAlert", data);
        };
        service.DEVICE_EIP_SCANV2_SERVICES_DISABLED = function() {
            service.showErrorAlert("SDE_TO_USE_APP", "SDE_SCAN_EXTENSION_SCAN1", null, null);
        };
        service.DEVICE_NETWORK_ERROR = function() {
            service.showErrorAlert("SDE_WRITTEN_NOTE_CONVERSION7", "SDE_CHECK_DEVICES_NETWORK", null, null);
        };
        service.XBB_DEVICE_EIP_INTERNAL_ERROR_SCAN = function() {
            service.showErrorAlert("SDE_XBB_DEVICE_EIP_INTERNAL_ERROR_SCAN", "", null, null);
        };
        service.DEVICE_EIP_INTERNAL_ERROR_TIMEOUT = function() {
            service.showErrorAlert("SDE_JOB_TIMED_OUT", "SDE_PLEASE_TRY_AGAIN1", null, null);
        };
        service.CLOUD_APP_GENERAL_ERROR = function() {
            service.showErrorAlert("SDE_WRITTEN_NOTE_CONVERSION6", "SDE_PLEASE_TRY_AGAIN1", null, null);
        };
        service.INPUT_SCAN_SIZE_NOT_DETERMINED = function() {
            service.showErrorAlert("SDE_INPUT_SCAN_SIZE", "SDE_PLEASE_TRY_AGAIN1", null, null);
        };
        function exitApp() {
            $rootScope.$broadcast("globalAppMessage", "Exit");
        }
        service.SDE_JOB_CANCELED1 = function() {
            service.showErrorAlert("SDE_JOB_CANCELED1", "SDE_PLEASE_TRY_AGAIN1", null, null);
        };
        service.wncWasReset = function() {
            service.showErrorAlert("SDE_WRITTEN_NOTE_CONVERSION5", "", null, null);
        };
        service.MP3_OUT_OF_CREDIT = function() {
            service.showErrorAlert("SDE_HAVE_USED_ALL", "SDE_GO_XEROX_APP", null, null).result.then(function() {
                if (typeof ExitCUIMode === "function") {
                    ExitCUIMode();
                } else {
                    window.location.reload();
                }
            });
        };
        service.APP_UNAVAILABLE_AT_THIS_TIME = function() {
            var data = {};
            data.title = "SDE_WRITTEN_NOTE_CONVERSION8";
            data.additionalInfo = "SDE_PLEASE_TRY_AGAIN2";
            data.additionalInfo2 = "SDE_IF_PROBLEM_PERSISTS3";
            modalService.openComponentModal("generalAlert", data).result.then(function() {
                window.location.reload();
            });
        };
        service.ADMIN_ACCOUNT_ALREADY_EXISTS = function() {
            service.showErrorAlert("SDE_WRITTEN_NOTE_CONVERSION8", "SDE_PLEASE_USE_DIFFERENT", null, null);
        };
        service.ADMIN_ACCOUNT_CREATED = function(emailAddress, callback) {
            var data = {};
            data.title = "SDE_ADMINISTRATOR_ACCOUNT_CREATED";
            data.additionalInfo = "SDE_EMAIL_SENT_FOLLOWING";
            data.additionalInfo2 = emailAddress;
            data.button1Callback = callback;
            return modalService.openComponentModal("generalAlert", data);
        };
        service.PASSWORD_RESET = function(callback) {
            var data = {};
            data.title = "SDE_PASSWORD_RESET_INSTRUCTIONS1";
            data.additionalInfo = "SDE_IF_DO_NOT8";
            data.button1Callback = callback;
            return modalService.openComponentModal("generalAlert", data);
        };
        service.CONFIRM_LOGOUT = function(confirmCallback, cancelCallback) {
            var data = {};
            data.title = "SDE_CONFIRM_LOG_OUT3";
            data.button1Callback = cancelCallback;
            data.button2Callback = confirmCallback;
            data.button1Text = "SDE_CANCEL";
            data.button2Text = "SDE_LOG_OUT";
            data.button1Glyph = "xrx-close";
            data.button2Glyph = "xrx-exit";
            return modalService.openComponentModal("generalAlert", data);
        };
        service.closeAllModals = function() {
            modalService.closeAllModals();
        };
        return service;
    }
    angular.module("app").factory("featurePopoverService", featurePopoverService);
    function featurePopoverService() {
        var service = {};
        service.popoverState = {};
        return service;
    }
    angular.module("app").factory("jobService", jobService);
    function jobService($http, apiService, configurationService, logService) {
        var service = {};
        service.registerJob = function(featureValues) {
            var config = {
                headers: {
                    "Content-Type": "text/json; charset=utf-8"
                }
            };
            var parsedFilename = featureValues.fileName + ".pdf";
            var job = {};
            job.jobId = featureValues.jobid;
            job.emailAddress = featureValues.email;
            job.timeZoneOffsetMinutes = new Date().getTimezoneOffset();
            job.filename = parsedFilename;
            job.localizedLanguage = localizedLanguage;
            job.appId = configurationService.getSetting("appId");
            job.deviceId = configurationService.getSetting("deviceId");
            job.orientation = featureValues.orientation;
            job.format = featureValues.fileFormat.toUpperCase();
            if (featureValues.fileFormat == "pdf") {
                job.archivalFormat = featureValues.archivalFormat ? "PDF/A-1b" : "PDF";
            }
            var request = {
                job: job
            };
            return $http.post(apiService.apiUrl("/api/v1/job"), request, config).then(function(result) {
                logService.logMsg("jobService -> registerJob -> success -> result.data:" + result.data, "information");
                return result.data;
            }, function(error) {
                logService.logMsg("jobService -> registerJob -> ERROR...", "error");
                if (error != null && error.data != null && error.data.ExceptionMessage != null) {
                    logService.logMsg("jobService -> registerJob -> ERROR:" + error.data.ExceptionMessage, "error");
                }
                if (error && error.status == 401) {
                    $rootScope.$broadcast("globalAppMessage", "unauthorized");
                }
            });
        };
        return service;
    }
    angular.module("app").factory("logService", logService);
    function logService($http, storageService) {
        var service = {};
        var storageProvider = storageService.getLocalStorage(true);
        service.logMsg = function(message, logType) {
            var config = {
                headers: {
                    "Content-Type": "text/json; charset=utf-8",
                    Authorization: "ED803572-7B6B-4E56-8DCB-9F9C22C679FA"
                }
            };
            var deviceID = storageProvider.getItem("deviceId");
            var argParms = {};
            argParms.LogMessage = message;
            argParms.LogType = logType || LogTypes.Information;
            argParms.DeviceID = deviceID;
            $http.post("api/log", argParms, config);
        };
        return service;
    }
    var LogTypes = {
        Information: "information",
        Error: "error",
        Warning: "warning"
    };
    angular.module("app").factory("modalService", modalService);
    function modalService($uibModal, $uibModalStack, $timeout, device) {
        var service = {};
        service.openComponentModal = function(componentName, data) {
            return $uibModal.open({
                component: componentName,
                resolve: {
                    data: function() {
                        return data;
                    }
                }
            });
        };
        service.showPreview = function(title, images) {
            return $uibModal.open({
                component: "imagePreviewer",
                resolve: {
                    title: function() {
                        return title;
                    },
                    images: function() {
                        return images;
                    }
                }
            });
        };
        service.showLogoutConfirmation = function() {
            return $uibModal.open({
                component: "logoutConfirmation"
            });
        };
        service.showPopover = function(feature, event) {
            return $uibModal.open({
                component: "featurePopover",
                resolve: {
                    feature: function() {
                        return feature;
                    },
                    event: function() {
                        return event;
                    }
                }
            });
        };
        service.showScanProgressBanner = function(loaderStatus) {
            ToggleProgressBanner = $uibModal.open({
                windowClass: !device.isThirdGenBrowser ? "allow-outside-interaction" : "allow-outside-banner-interaction",
                backdrop: false,
                component: "progressBanner"
            });
            return ToggleProgressBanner;
        };
        service.closeScanProgressBanner = function(loaderStatus) {
            ToggleProgressBanner.close();
        };
        service.showProgressAlert = function(title, body) {
            return $uibModal.open({
                component: "progressAlert",
                resolve: {
                    title: function() {
                        return title;
                    },
                    body: function() {
                        return body;
                    }
                }
            });
        };
        service.showAlert = function(message) {
            var modal = $uibModal.open({
                component: "alertBanner",
                windowClass: !device.isThirdGenBrowser ? "allow-outside-interaction" : "allow-outside-banner-interaction",
                backdrop: false,
                resolve: {
                    message: function() {
                        return message;
                    }
                }
            });
            $timeout(function() {
                modal.close();
            }, 3e3);
        };
        service.showSimpleAlert = function(title, body, buttonText) {
            return $uibModal.open({
                component: "basicAlert",
                resolve: {
                    title: function() {
                        return title;
                    },
                    body: function() {
                        return body;
                    },
                    buttonText: function() {
                        return buttonText || "SDE_CLOSE";
                    }
                }
            });
        };
        service.closeAllModals = function() {
            $uibModalStack.dismissAll();
        };
        return service;
    }
    var ToggleProgressBanner;
    angular.module("app").factory("scanOptionsService", scanOptionsService);
    function scanOptionsService(logService, strings) {
        var service = {};
        service.fileName = "Xerox Scan";
        service.email = "";
        service.fileFormat = {
            name: "fileFormat",
            title: "SDE_FILE_FORMAT",
            icon: "file_name_and_format_48.png",
            options: [ {
                value: "docx",
                title: ".docx",
                icon: "filetype_docx_48.png",
                isDefault: true
            }, {
                value: "txt",
                title: ".txt",
                icon: "filetype_txt_48.png"
            } ],
            subFeatures: [ {
                name: "archivalFormat",
                title: "SDE_ARCHIVAL_PDFA",
                enabledIf: "pdf",
                type: "toggle",
                options: [ {
                    value: false,
                    isDefault: true
                }, {
                    value: true
                } ]
            } ]
        };
        service.scanFeatures = [ {
            name: "plex",
            title: "SDE_2SIDED_SCANNING",
            icon: "2_sided_48.png",
            options: [ {
                value: "ONE_SIDED",
                title: "SDE_1SIDED",
                icon: "2_sided_1_48.png",
                isDefault: true
            }, {
                value: "TWO_SIDED",
                title: "SDE_2SIDED",
                icon: "2_sided_2_48.png"
            }, {
                value: "SECOND_SIDE_ROTATION",
                title: "SDE_2SIDED_ROTATE_SIDE",
                icon: "2_sided_rotate_48.png"
            } ]
        }, {
            name: "originalSize",
            title: "SDE_ORIGINAL_SIZE",
            icon: "original_size_48.png",
            options: [ {
                value: "AUTO",
                title: "SDE_AUTO_DETECT",
                isDefault: true
            }, {
                value: "8_5_x_11_Portrait",
                title: '8.5 x 11"',
                glyph: "xrx-portrait"
            }, {
                value: "8_5_x_11_Landscape",
                title: '8.5 x 11"',
                glyph: "xrx-landscape"
            }, {
                value: "8_5_x_14_Landscape",
                title: '8.5 x 14"',
                glyph: "xrx-landscape"
            }, {
                value: "11_x_17_Landscape",
                title: '11 x 17"',
                glyph: "xrx-landscape"
            }, {
                value: "A4_Portrait",
                title: "A4",
                glyph: "xrx-portrait"
            }, {
                value: "A4_Landscape",
                title: "A4",
                glyph: "xrx-landscape"
            }, {
                value: "A3_Landscape",
                title: "A3",
                glyph: "xrx-landscape"
            } ]
        } ];
        service.resetFeatureSettings = function() {
            _.each(service.scanFeatures, function(feature) {
                setDefaults(feature);
            });
            setDefaults(service.fileFormat);
        };
        _.each(service.scanFeatures, function(feature) {
            setDefaults(feature);
        });
        setDefaults(service.fileFormat);
        function setDefaults(feature) {
            _.each(feature.subFeatures, function(subFeature) {
                setDefaults(subFeature);
            });
            if (feature.options) {
                feature.selectedOption = _.find(feature.options, "isDefault");
            }
        }
        service.getValues = function() {
            var featuresList = service.scanFeatures;
            var sidedStr = featuresList[0].selectedOption.value;
            var originalSizeStr = featuresList[1].selectedOption.value;
            var values = {};
            switch (originalSizeStr) {
              case "8_5_x_11_Portrait":
                values.mediaSize = "NA_8.5x11LEF";
                values.orientation = "PORTRAIT";
                break;

              case "8_5_x_11_Landscape":
                values.mediaSize = "NA_8.5x11SEF";
                values.orientation = "LANDSCAPE";
                break;

              case "8_5_x_14_Landscape":
                values.mediaSize = "NA_8.5x14SEF";
                values.orientation = "LANDSCAPE";
                break;

              case "11_x_17_Landscape":
                values.mediaSize = "NA_11x17SEF";
                values.orientation = "LANDSCAPE";
                break;

              case "A4_Portrait":
                values.mediaSize = "ISO_A4LEF";
                values.orientation = "PORTRAIT";
                break;

              case "A4_Landscape":
                values.mediaSize = "ISO_A4SEF";
                values.orientation = "LANDSCAPE";
                break;

              case "A3_Landscape":
                values.mediaSize = "ISO_A3SEF";
                values.orientation = "LANDSCAPE";
                break;

              default:
                values.mediaSize = "AUTO";
                values.orientation = "PORTRAIT";
                break;
            }
            values.fileFormat = service.fileFormat.selectedOption.value;
            values.archivalFormat = service.fileFormat.subFeatures[0].selectedOption.value;
            values.colorMode = "AUTO";
            values.combineFiles = true;
            values.originalType = "MIXED";
            values.plex = sidedStr;
            values.quality = "128";
            values.resolution = "RES_300X300";
            values.searchableText = "SEARCHABLE_IMAGE";
            values.fileName = window.btoa(unescape(encodeURIComponent(service.fileName)));
            values.email = service.email;
            return values;
        };
        function mapSelected(feature, feats) {
            _.each(feature.subFeatures, function(f) {
                mapSelected(f, feats);
            });
            var p = {};
            p[feature.name] = feature.selectedOption.value;
            _.merge(feats, p);
        }
        service.updateDisabledOptions = function(feature) {
            var currentOptions = service.getValues();
            _.each(feature.options, function(option) {
                _.each(option.disabledIf, function(disabledCondition) {
                    if (currentOptions[disabledCondition.feature] === disabledCondition.value) {
                        option.disabled = true;
                        option.disabledMessage = disabledCondition.message;
                        return false;
                    } else {
                        option.disabled = false;
                        option.disabledMessage = null;
                    }
                });
            });
        };
        return service;
    }
    angular.module("app").factory("scanService", scanService);
    function scanService($http, $rootScope, $timeout, $q, modalService, scanTemplate, logService, errorHandlerService, scanOptionsService, jobService, strings) {
        var service = {};
        var printerUrl = "http://127.0.0.1";
        var sessionUrl = "http://localhost";
        service.scanOptionsService = scanOptionsService;
        service.callbacks = {
            handleScanException: function(message) {
                service.callbacks.completeScan({
                    error: true,
                    message: message
                });
            },
            handleJobCanceled: function() {
                service.callbacks.completeScan({
                    error: true,
                    message: "canceled"
                });
            },
            handleJobAbortedBySystem: function() {
                service.callbacks.completeScan({
                    message: "Scan Job Aborted By System"
                });
            },
            handleInputSizeNotDetermined: function() {
                service.callbacks.completeScan({
                    error: true,
                    message: "Input size not determined"
                });
            },
            handleJobComplete: function() {
                service.callbacks.completeScan({
                    message: "complete"
                });
            },
            handleFinishPutTemplateError: function() {
                service.callbacks.completeScan({
                    error: true,
                    message: "Error sending template to device"
                });
            },
            handleBeginCheckFailure: function(request, response) {
                service.callbacks.completeScan({
                    error: true,
                    deviceDetails: response
                });
            },
            handlePutTemplateFailure: function(message) {
                service.callbacks.completeScan({
                    error: true,
                    deviceDetails: message
                });
            },
            completeScan: function(detail) {
                service.isScanning = false;
                service.isComplete = true;
                if (detail.error) {
                    completeScanPromise.reject(detail);
                } else {
                    completeScanPromise.resolve(detail);
                }
            }
        };
        service.isComplete = false;
        service.isScanning = false;
        var template;
        var completeScanPromise = null;
        var jobid = null;
        service.isExistingEmail = function(email) {
            var config = {
                headers: {
                    "Content-Type": "text/json; charset=utf-8",
                    Authorization: "ED803572-7B6B-4E56-8DCB-9F9C22C679FA"
                }
            };
            return $http.get("api/IsExistingEmail?email=" + email, config);
        };
        service.scan = function(model) {
            logService.logMsg("service.scan", "information");
            if (service.isScanning) {
                logService.logMsg("service.scan -> service.isScanning : Please wait!!!!", "information");
                throw strings["SDE_PLEASE_WAIT_UNTIL"];
            }
            jobid = generateNewJobID();
            logService.logMsg("scanService => scan => jobID:" + jobid, "information");
            model.jobid = jobid;
            template = new scanTemplate(model);
            modalService.showProgressAlert(strings.SDE_SCANNING1);
            return jobService.registerJob(model).then(function(result) {
                var tStr = template.toString();
                logService.logMsg("scanService => scan => template:" + tStr, "information");
                service.isScanning = true;
                service.isComplete = false;
                completeScanPromise = $q.defer();
                logService.logMsg("service.scan -> calling putTemplate()", "information");
                putTemplate();
                return completeScanPromise.promise;
            });
        };
        function putTemplate() {
            logService.logMsg("putTemplate()...", "information");
            xrxTemplatePutTemplate(printerUrl, template.name, template.toString(), function finish(callId, response) {
                logService.logMsg("scanService => putTemplate => callId:" + callId + " response:" + response, "information");
                finishPutTemplate(callId, response);
            }, function fail(env, message) {
                modalService.closeAllModals();
                errorHandlerService.APP_UNAVAILABLE_AT_THIS_TIME();
            });
        }
        function finishPutTemplate(callId, response) {
            logService.logMsg("finishPutTemplate(callId,response) -> callId:" + callId + " response:" + response, "information");
            var xmlDoc = xrxStringToDom(response);
            logService.logMsg("finishPutTemplate(callId,response) -> xmlDoc:" + xmlDoc, "information");
            template.checkSum = xrxGetElementValue(xmlDoc, "TemplateChecksum");
            xrxScanV2InitiateScanJobWithTemplate(printerUrl, template.name, false, null, function finish(callId, response) {
                logService.logMsg("function finish(callId, response) -> callId:" + callId + " response:" + response, "information");
                template.jobId = xrxScanV2ParseInitiateScanJobWithTemplate(response);
                startScanTime = new Date();
                stopScanTime = new Date();
                stopScanTime.setMinutes(stopScanTime.getMinutes() + timeoutInMinutes);
                beginCheckLoop(template.jobId);
            }, function fail(env, message) {
                logService.logMsg("function fail(env, message) {  -> env:" + env + " message:" + message, "information");
                service.callbacks.handleFinishPutTemplateError();
                errorHandlerService.CLOUD_APP_GENERAL_ERROR();
            });
        }
        var startScanTime = null;
        var stopScanTime = null;
        var timeoutInMinutes = 1;
        function checkScanTimeout() {
            if (startScanTime != null) {
                return stopScanTime.getMinutes() >= startScanTime.getMinutes() && stopScanTime.getSeconds() > startScanTime.getSeconds();
            }
            return false;
        }
        function beginCheckLoop() {
            if (service.isComplete) {
                return;
            }
            logService.logMsg("beginCheckLoop()...", "information");
            xrxJobMgmtGetJobDetails(sessionUrl, "WorkflowScanning", template.jobId, checkLoop, service.callbacks.handleBeginCheckFailure, 5e3);
        }
        function checkLoop(request, response) {
            logService.logMsg("checkLoop(request, response) -> request:" + request + " response:" + response, "information");
            var jobStateReason = "";
            var info = xrxJobMgmtParseGetJobDetails(response);
            var jobState = xrxGetElementValue(info, "JobState");
            var dummy = xrxJobMgmtParseJobStateReasons(response);
            logService.logMsg("checkLoop(request, response) -> jobState:" + jobState + " dummy:" + dummy, "information");
            console.log(jobState + " " + dummy);
            if (jobState === null || jobState === "Completed") {
                logService.logMsg("if (jobState === null || jobState === Completed)", "information");
                jobStateReason = xrxParseJobStateReasons(response);
                logService.logMsg("jobStateReason:" + jobStateReason, "information");
            }
            $rootScope.$broadcast("jobStatusCheckSuccess", {
                jobId: template.jobId,
                state: jobState,
                reason: jobStateReason
            });
            template.status = {
                lastJobState: jobState,
                lastJobStateReason: jobStateReason
            };
            if (checkScanTimeout()) {
                logService.logMsg("if (checkScanTimeout()) { ", "information");
                jobState = "Completed";
                jobStateReason = "JobAborted";
                service.callbacks.handleJobAbortedBySystem();
                $timeout(deleteScanTemplate(), 500);
                errorHandlerService.DEVICE_EIP_INTERNAL_ERROR_TIMEOUT();
                return;
            }
            if (jobState === "Completed" && jobStateReason === "JobCompletedSuccessfully") {
                modalService.closeAllModals();
                var title = strings.SDE_DOCUMENT_SUCCESSFULLY_SCANNED;
                var msg = strings.SDE_WILL_RECEIVE_EMAIL2.replace("{0}", "Xerox Note Converter");
                modalService.showSimpleAlert(title, msg);
                logService.logMsg("if (jobState === Completed && jobStateReason == JobCompletedSuccessfully) { ", "information");
                $rootScope.$broadcast("jobProgress", "JOB_COMPLETED_SUCCESSFULLY");
            }
            if (jobState === "Completed" && jobStateReason === "InputScanSizeNotDetermined") {
                logService.logMsg("if (jobState === Completed && jobStateReason === InputScanSizeNotDetermined) {  jobState:" + jobState + " jobStateReason:" + jobStateReason, "information");
                errorHandlerService.INPUT_SCAN_SIZE_NOT_DETERMINED();
                service.callbacks.handleInputSizeNotDetermined();
                $timeout(deleteScanTemplate(), 500);
                return;
            }
            if (jobState === "Completed" && jobStateReason === "None") {} else if (jobState === "Completed" && jobStateReason && jobStateReason != "JobCompletedSuccessfully") {
                logService.logMsg("if (jobState === Completed && jobStateReason && jobStateReason != JobCompletedSuccessfully) {", "information");
                modalService.closeAllModals();
                errorHandlerService.APP_UNAVAILABLE_AT_THIS_TIME();
                return;
            } else {
                logService.logMsg("jobProgress:" + jobState, "information");
            }
            if (jobState === "Completed" && jobStateReason == "JobCompletedSuccessfully") {
                $timeout(service.callbacks.handleJobComplete(), 500);
                $timeout(deleteScanTemplate(), 500);
                return;
            } else if (jobState === "Completed" && (jobStateReason === "JobAborted" || jobStateReason === "AbortBySystem")) {
                logService.logMsg("else if (jobState === Completed && (jobStateReason === JobAborted || jobStateReason === AbortBySystem)) {", "information");
                errorHandlerService.SDE_JOB_CANCELED1();
                service.callbacks.handleJobAbortedBySystem();
                $timeout(deleteScanTemplate(), 500);
            } else if (jobState === "Completed" && (jobStateReason === "JobCanceledByUser" || jobStateReason === "CancelByUser")) {
                logService.logMsg("else if (jobState === Completed && (jobStateReason === JobCanceledByUser || jobStateReason === CancelByUser)) {", "information");
                errorHandlerService.SDE_JOB_CANCELED1();
                service.callbacks.handleJobCanceled();
                $timeout(deleteScanTemplate(), 500);
            } else if (jobState === "ProcessingStopped" && (jobStateReason === "NextOriginalWait" || jobStateReason === "")) {
                logService.logMsg("else if ProcessingStopped NextOriginalWait", "information");
                $timeout(beginCheckLoop, 2e3);
            } else if (!(jobState === "Completed" && jobStateReason === "None") && (jobState === "Completed" || jobState === "ProcessingStopped")) {
                logService.logMsg("else if Completed ProcessingStopped", "information");
                $timeout(service.callbacks.handleJobComplete(), 500);
                $timeout(deleteScanTemplate(), 500);
            } else if (jobState === null && jobStateReason === "JobCanceledByUser") {
                logService.logMsg("else if JobCanceledBUser", "information");
                service.callbacks.handleJobCanceled();
                $timeout(deleteScanTemplate(), 500);
                errorHandlerService.SDE_JOB_CANCELED1();
            } else if (jobState === null && jobStateReason !== "") {
                logService.logMsg("else if (jobState === null && jobStateReason !== ) {  jobStateReason:" + jobStateReason, "information");
                errorHandlerService.SDE_JOB_CANCELED1();
                service.callbacks.handleScanException(jobStateReason);
                $timeout(deleteScanTemplate(), 500);
            } else {
                $timeout(beginCheckLoop, 2e3);
            }
        }
        function deleteScanTemplate() {
            if (template.checkSum) {
                xrxTemplateDeleteTemplate(printerUrl, template.name, template.checkSum, function success() {}, function failure() {});
            }
        }
        return service;
    }
    angular.module("app").factory("storageService", storageService);
    function storageService() {
        var service = {};
        var cryptoKey = "QkQwQTEyNDUtQzhENy00RTc5LUJEMUMtNjI5REM4MTBDRERG";
        function encrypt(value) {
            return CryptoJS.AES.encrypt(value, cryptoKey);
        }
        function decrypt(value) {
            if (value) {
                try {
                    var decryptedBytes = CryptoJS.AES.decrypt(value, cryptoKey);
                    return decryptedBytes.toString(CryptoJS.enc.Utf8);
                } catch (err) {
                    return value;
                }
            }
            return value;
        }
        var provider = function(storageProviderName, useEncryption) {
            var storageProvider = null;
            if (storageProviderName == "local") {
                storageProvider = localStorage;
            } else {
                storageProvider = sessionStorage;
            }
            this.getItem = function(key) {
                var value = storageProvider.getItem(key);
                if (useEncryption) {
                    return decrypt(value);
                } else {
                    return value;
                }
            };
            this.setItem = function(key, value) {
                if (useEncryption) {
                    storageProvider.setItem(key, encrypt(value));
                } else {
                    storageProvider.setItem(key, value);
                }
            };
        };
        service.getLocalStorage = function(useEncryption) {
            return new provider("local", useEncryption);
        };
        service.getSessionStorage = function(useEncryption) {
            return new provider("session", useEncryption);
        };
        return service;
    }
    angular.module("app").factory("wnclogService", wnclogService);
    function wnclogService() {
        var service = {};
        return service;
    }
})();

angular.module("templates-main", [ "Scripts/App/Components/alertBanner.html", "Scripts/App/Components/basicAlert.html", "Scripts/App/Components/featurePopover.html", "Scripts/App/Components/fileFormatModal.html", "Scripts/App/Components/generalAlert.html", "Scripts/App/Components/keypad.html", "Scripts/App/Components/privacyPolicy.html", "Scripts/App/Components/progressAlert.html", "Scripts/App/Components/progressBanner.html", "Scripts/App/Components/scanScreen.html", "Scripts/App/Components/spinBox.html", "Scripts/App/Components/toggleSwitch.html" ]);

angular.module("Scripts/App/Components/alertBanner.html", []).run([ "$templateCache", function($templateCache) {
    $templateCache.put("Scripts/App/Components/alertBanner.html", '<div class="banner">\n' + "    <table>\n" + "        <tr>\n" + '            <td style="width:100%;">\n' + '                <div class="banner-text-container">\n' + '                    <span class="banner-text" xas-string="{{$ctrl.resolve.message}}"></span>\n' + "                </div>\n" + "            </td>\n" + "            <td>\n" + '                <div class="banner-button-container">\n' + '                    <button class="btn btn-medium btn-secondary-alert banner-button xrx-navigate_down" ng-click="$ctrl.close()"></button>\n' + "                </div>\n" + "            </td>\n" + "        </tr>\n" + "    </table>\n" + "</div>");
} ]);

angular.module("Scripts/App/Components/basicAlert.html", []).run([ "$templateCache", function($templateCache) {
    $templateCache.put("Scripts/App/Components/basicAlert.html", '<div class="alert-popup alert-background alert-opacity" role="alertdialog" aria-labelledby="myAlertPopupDialogTitle" tabindex="-1" style="display: block;">\n' + '    <div class="alert-container">\n' + '        <div class="alert-content">\n' + '            <h3 ng-if="$ctrl.resolve.title" class="alert-title" xas-string="{{$ctrl.resolve.title}}">{{$ctrl.resolve.title}}</h3>\n' + '            <p ng-if="$ctrl.resolve.body">\n' + '                <span class="alert-additional-info" xas-string="{{$ctrl.resolve.body}}">{{$ctrl.resolve.body}}</span>\n' + "            </p>\n" + '            <div class="alert-button-container">\n' + '                <button type="button" class="btn btn-medium glyph-button btn-secondary-alert xrx-close" xas-string="{{$ctrl.resolve.buttonText}}" ng-click="$ctrl.close()">{{$ctrl.resolve.buttonText}}</button>\n' + "            </div>\n" + "        </div>\n" + "    </div>\n" + "</div>");
} ]);

angular.module("Scripts/App/Components/featurePopover.html", []).run([ "$templateCache", function($templateCache) {
    $templateCache.put("Scripts/App/Components/featurePopover.html", '<div class="popover" id="{{$ctrl.feature.name}}" style="visibility:hidden" ng-style="{\'visibility\': $ctrl.show ? \'visible\':\'hidden\'}">\n' + '    <div class="contents">\n' + '        <div class="popover-scroll-content" ng-scrollable=\'{"watchHeight": true}\'>\n' + '            <ul class="action-list button-group">\n' + '                <li ng-repeat="option in ::$ctrl.feature.options track by option.value">\n' + "\n" + '                    <button class="btn btn-medium btn-image"\n' + '                            ng-tap-click="$ctrl.selectOption(option);"\n' + "                            ng-class=\"::{'selected': option === $ctrl.feature.selectedOption,\n" + "                                             'disabled': option.disabled}\">\n" + "\n" + "                        \x3c!-- Option icon --\x3e\n" + '                        <div class="image-container" ng-if="option.icon">\n' + '                            <img class="image" ng-src="Content/images/{{option.icon}}">\n' + "                        </div>\n" + "\n" + "                        \x3c!-- Option text --\x3e\n" + '                        <div class="text-container">\n' + '                            <span class="left-text" xas-string="{{option.title}}"></span>\n' + "                        </div>\n" + "\n" + "                        \x3c!-- Option glyph --\x3e\n" + '                        <div class="glyph-container" ng-if="option.glyph">\n' + '                            &nbsp;&nbsp;<span ng-class="option.glyph"></span>\n' + "                        </div>\n" + "\n" + "                    </button>\n" + "\n" + "                </li>\n" + '                <li ng-if="$ctrl.feature.moreOptionsModal">\n' + "\n" + '                    <button class="btn btn-medium btn-image" ng-tap-click="$ctrl.openMoreOptionsModal();">\n' + "                        \x3c!-- More options icon --\x3e\n" + '                        <div class="image-container">\n' + '                            <img class="image" ng-src="Content/Images/file_format_more_48.png">\n' + "                        </div>\n" + "\n" + "                        \x3c!-- More options text --\x3e\n" + '                        <div class="text-container">\n' + '                            <span class="left-text" xas-string="SDE_MORE"></span>\n' + "                        </div>\n" + "                    </button>\n" + "\n" + "                </li>\n" + "            </ul>\n" + "        </div>\n" + "    </div>\n" + "\n" + "    <arrow>\n" + '        <div style="width:1px; height:25px;"></div>\n' + '        <div style="width:1px; height:23px;margin-top:1px;"></div>\n' + '        <div style="width:1px; height:21px;margin-top:2px;"></div>\n' + '        <div style="width:1px; height:19px;margin-top:3px;"></div>\n' + '        <div style="width:1px; height:17px;margin-top:4px;"></div>\n' + '        <div style="width:1px; height:15px;margin-top:5px;"></div>\n' + '        <div style="width:1px; height:13px;margin-top:6px;"></div>\n' + '        <div style="width:1px; height:11px;margin-top:7px;"></div>\n' + '        <div style="width:1px; height:9px;margin-top:8px;"></div>\n' + '        <div style="width:1px; height:7px;margin-top:9px;"></div>\n' + '        <div style="width:1px; height:5px;margin-top:10px;"></div>\n' + '        <div style="width:1px; height:3px;margin-top:11px;"></div>\n' + '        <div style="width:1px; height:1px;margin-top:12px;"></div>\n' + "    </arrow>\n" + "</div>");
} ]);

angular.module("Scripts/App/Components/fileFormatModal.html", []).run([ "$templateCache", function($templateCache) {
    $templateCache.put("Scripts/App/Components/fileFormatModal.html", '<div class="modal-body" style="height: 500px;">\n' + '    <div class="header" action-bar>\n' + '        <div class="header-left">\n' + '            <button class="btn btn-medium btn-glyph xrx-close" ng-click="$ctrl.dismiss()"></button>\n' + "        </div>\n" + '        <div class="header-right">\n' + '            <button class="btn btn-medium btn-glyph-label xrx-OK" xas-string="SDE_OK" ng-click="$ctrl.ok()"></button>\n' + "        </div>\n" + '        <div class="header-middle">\n' + '            <div class="header-title-container">\n' + '                <div class="header-title" xas-string="SDE_FILE_FORMAT"></div>\n' + "            </div>\n" + "        </div>\n" + "    </div>\n" + "\n" + '    <div class="file-format-modal-body">\n' + '        <div class="grid-container">\n' + '            <div class="grid-row">\n' + "                \x3c!-- sidebar --\x3e\n" + '                <div class="column-10-12 column-5-c-13">\n' + '                    <ul class="action-list">\n' + '                        <li ng-repeat="option in $ctrl.feature.options track by option.value">\n' + '                            <button class="btn btn-medium btn-image"\n' + '                                    ng-click="$ctrl.selectOption(option)"\n' + "                                    ng-class=\"::{'selected': option === $ctrl.feature.selectedOption,\n" + "                                                  'disabled': option.disabled}\">\n" + '                                <div class="image-container">\n' + '                                    <img class="image" ng-src="Content/Images/{{option.icon}}">\n' + "                                </div>\n" + "\n" + '                                <div class="text-container">\n' + '                                    <span class="left-text" xas-string="{{option.title}}"></span>\n' + "                                </div>\n" + "                            </button>\n" + "                        </li>\n" + "                    </ul>\n" + "                </div>\n" + "\n" + "                \x3c!-- options --\x3e\n" + '                <div class="column-10-50 column-offset-10-1 column-5-c-49 column-offset-5-g-1">\n' + '                    <div style="margin-bottom:10px"\n' + '                         ng-if="$ctrl.feature.selectedOption.value == subFeature.enabledIf"\n' + '                         ng-repeat="subFeature in $ctrl.feature.subFeatures track by subFeature.name">\n' + "\n" + '                        <ul class="action-list">\n' + "                            <li>\n" + '                                <button class="btn btn-medium" style="text-align:left">\n' + '                                    <span style="vertical-align:middle;" xas-string="{{subFeature.title}}"></span>\n' + "\n" + "                                    \x3c!-- We'll make the assumption that for toggle type features false is the first option and true the second --\x3e\n" + '                                    <toggle-switch ng-if="subFeature.type==\'toggle\'" ng-model="subFeature.selectedOption" style="float:right;"\n' + '                                                   false-value="subFeature.options[0]"\n' + '                                                   true-value="subFeature.options[1]">\n' + "                                    </toggle-switch>\n" + "                                </button>\n" + "                            </li>\n" + '                            <li ng-if="subFeature.selectedOption.value == subSubFeature.enabledIf"\n' + '                                ng-repeat="subSubFeature in subFeature.subFeatures track by subSubFeature.name"\n' + '                                ng-click="$ctrl.openFeaturePopover(subSubFeature)">\n' + '                                <button class="btn btn-medium" style="text-align:left;">\n' + '                                    <span xas-string="{{subSubFeature.title}}"></span>\n' + '                                    <span class="pull-right" xas-string="{{subSubFeature.selectedOption.title}}"></span>\n' + "                                </button>\n" + "                            </li>\n" + "                        </ul>\n" + "\n" + "                        \x3c!-- Description of the subfeature chosen option --\x3e\n" + '                        <div ng-if="subFeature.selectedOption.desc" style="font-size:18px;margin-left:10px;margin-top:5px">\n' + '                            <span xas-string="{{subFeature.selectedOption.desc}}"> </span>\n' + "                        </div>\n" + "                    </div>\n" + "                </div>\n" + "            </div>\n" + "        </div>\n" + "    </div>\n" + "</div>");
} ]);

angular.module("Scripts/App/Components/generalAlert.html", []).run([ "$templateCache", function($templateCache) {
    $templateCache.put("Scripts/App/Components/generalAlert.html", "\x3c!-- Copyright © 2019 Xerox Corporation. All Rights Reserved. --\x3e\n" + "\n" + '<div class="alert">\n' + "\n" + '    <div class="alert-container">\n' + "\n" + '        <div class="alert-content">\n' + "\n" + '            <h3 class="alert-title" xas-string="{{$ctrl.title}}"></h3>\n' + '            <div class="alert-additional-info" xas-string="{{$ctrl.additionalInfo}}"></div>\n' + '            <div ng-if="$ctrl.additionalInfo2" class="alert-additional-info" xas-string="{{$ctrl.additionalInfo2}}"></div>\n' + "\n" + "\n" + '            <div class="alert-button-container">\n' + '                <button type="button" class="{{$ctrl.button1Classes}}" xas-string="{{$ctrl.button1Text}}" ng-click="$ctrl.button1()" tabindex="-1"></button>\n' + '                <button type="button" class="{{$ctrl.button2Classes}}"\n' + '                        ng-if="$ctrl.resolve.data.button2Callback!=null" xas-string="{{$ctrl.button2Text}}" ng-click="$ctrl.button2()" tabindex="-1"></button>\n' + "            </div>\n" + "\n" + "        </div>\n" + "\n" + "    </div>\n" + "</div>");
} ]);

angular.module("Scripts/App/Components/keypad.html", []).run([ "$templateCache", function($templateCache) {
    $templateCache.put("Scripts/App/Components/keypad.html", '<div id="Keypad" class="modal-body full-screen">\n' + '    <div class="header" action-bar>\n' + '        <div class="header-left">\n' + '            <button class="btn btn-medium btn-glyph xrx-close" ng-click="$ctrl.dismiss()"></button>\n' + "        </div>\n" + "\n" + '        <div class="header-right">\n' + '            <button class="btn btn-medium btn-glyph-label xrx-OK" xas-string="SDE_OK" ng-click="$ctrl.update()"></button>\n' + "        </div>\n" + "\n" + '        <div class="header-middle">\n' + '            <div class="header-title-container">\n' + '                <div class="header-title" xas-string="SDE_QUANTITY"></div>\n' + "            </div>\n" + "        </div>\n" + "    </div>\n" + "\n" + '    <div class="row padddingTop">\n' + '        <div class="column-5-c-25 text-center">\n' + '            <input id="valueBox" name="result_EIP_DoNotShowEmbeddedKeyboard" class="text-center keypadTextBox textField gray" type="text" maxlength="4" ng-keypress="$ctrl.keypadPressed($event.target.value)" ng-bind="$ctrl.value" ng-model="$ctrl.value">\n' + "        </div>\n" + '        <div class="column-5-c-38 text-center" ng-scrollable use-transform="false">\n' + '            <div class="row keypadRow">\n' + '                <button ng-tap-click="$ctrl.keypadPressed(1)" class="text-center btn normal gray text-large large edg one">1</button>\n' + '                <button ng-tap-click="$ctrl.keypadPressed(2)" class="text-center btn normal gray text-large large centr">2</button>\n' + '                <button ng-tap-click="$ctrl.keypadPressed(3)" class="text-center btn normal gray text-large large edg three">3</button>\n' + "            </div>\n" + '            <div class="row keypadRow">\n' + '                <button ng-tap-click="$ctrl.keypadPressed(4)" class="text-center btn normal gray text-large large edg">4</button>\n' + '                <button ng-tap-click="$ctrl.keypadPressed(5)" class="text-center btn normal gray text-large large centr">5</button>\n' + '                <button ng-tap-click="$ctrl.keypadPressed(6)" class="text-center btn normal gray text-large large edg">6</button>\n' + "            </div>\n" + '            <div class="row keypadRow">\n' + '                <button ng-tap-click="$ctrl.keypadPressed(7)" class="text-center btn normal gray text-large large edg">7</button>\n' + '                <button ng-tap-click="$ctrl.keypadPressed(8)" class="text-center btn normal gray text-large large centr">8</button>\n' + '                <button ng-tap-click="$ctrl.keypadPressed(9)" class="text-center btn normal gray text-large large edg">9</button>\n' + "            </div>\n" + '            <div class="row keypadRow">\n' + '                <button ng-tap-click="$ctrl.keypadPressed(0)" class="text-center btn normal gray text-large large keypadZero">0</button>\n' + '                <button ng-tap-click="$ctrl.clear()" class="btn normal gray text-large large xrx-close_square"></button>\n' + "            </div>\n" + "        </div>\n" + "    </div>\n" + "</div>");
} ]);

angular.module("Scripts/App/Components/privacyPolicy.html", []).run([ "$templateCache", function($templateCache) {
    $templateCache.put("Scripts/App/Components/privacyPolicy.html", "\x3c!-- Copyright © 2020 Xerox Corporation. All Rights Reserved. Copyright protection claimed includes all forms and --\x3e\n" + "\x3c!-- matters of copyrightable material and information now allowed by statutory or judicial law or hereinafter granted, --\x3e\n" + "\x3c!-- including without limitation, material generated from the software programs which are displayed on the screen such --\x3e\n" + "\x3c!-- as icons, screen display looks, etc. --\x3e\n" + "\n" + '<div class="modal-body full-screen">\n' + '    <div class="header" action-bar>\n' + '        <div class="header-right">\n' + '            <button type="button" class="btn btn-medium btn-glyph xrx-close" ng-click="$ctrl.dismiss()"></button>\n' + "        </div>\n" + "\n" + '        <div class="header-middle">\n' + '            <div class="header-title-container">\n' + '                <div class="header-title"><span xas-string="SDE_PRIVACY_STATEMENT"></span><span ng-if="$ctrl.showVersion" class="version" xas-string="VERSION"></span></div>\n' + "\n" + "            </div>\n" + "        </div>\n" + "    </div>\n" + "\n" + '    <div class="popup-content">\n' + '        <div class="scroll-container" style="overflow:hidden" ng-scrollable=\'{"autoHeight": true, "watchHeight": true}\'>\n' + '            <div class="privacy-policy-content" ng-bind-html="$ctrl.privacyPolicy"></div>\n' + "        </div>\n" + "    </div>\n" + "</div>\n" + "");
} ]);

angular.module("Scripts/App/Components/progressAlert.html", []).run([ "$templateCache", function($templateCache) {
    $templateCache.put("Scripts/App/Components/progressAlert.html", '<div class="alert-popup alert-background alert-opacity" role="alertdialog" aria-labelledby="myAlertPopupDialogTitle" tabindex="-1" style="display: block;">\n' + '    <div class="alert-container">\n' + '        <div class="alert-content">\n' + '            <div class="progress-spinner"></div>\n' + '            <h3 ng-if="$ctrl.resolve.title" class="alert-title" xas-string="{{$ctrl.resolve.title}}">{{$ctrl.resolve.title}}</h3>\n' + '            <p ng-if="$ctrl.resolve.body">\n' + '                <span class="alert-additional-info" xas-string="{{$ctrl.resolve.body}}">{{$ctrl.resolve.body}}</span>\n' + "            </p>\n" + "        </div>\n" + "    </div>\n" + "</div>");
} ]);

angular.module("Scripts/App/Components/progressBanner.html", []).run([ "$templateCache", function($templateCache) {
    $templateCache.put("Scripts/App/Components/progressBanner.html", '<div class="banner">\n' + "    <table>\n" + "        <tr>\n" + "            <td>\n" + '                <div class="banner-image-container">\n' + "                    <img class=\"banner-image\" ng-src=\"{{$ctrl.complete ? 'Content/Images/ProgressBarCheck.png' : 'Content/Images/ProgressBarSpin.gif'}}\">\n" + "                </div>\n" + "            </td>\n" + '            <td style="width:100%;">\n' + '                <div class="banner-text-container">\n' + '                    <span class="banner-text" xas-string="{{$ctrl.status}}"></span>\n' + "                </div>\n" + "            </td>\n" + "            <td>\n" + '                <div class="banner-button-container">\n' + '                    <button class="btn btn-medium btn-secondary-alert banner-button xrx-navigate_down" ng-click="$ctrl.close()"></button>\n' + "                </div>\n" + "            </td>\n" + "        </tr>\n" + "    </table>\n" + "</div>");
} ]);

angular.module("Scripts/App/Components/scanScreen.html", []).run([ "$templateCache", function($templateCache) {
    $templateCache.put("Scripts/App/Components/scanScreen.html", "\x3c!-- Copyright © 2019 Xerox Corporation. All Rights Reserved. --\x3e\n" + '<div class="loading-spinner" id="spinnerIcon" style="display:none"></div>\n' + "\n" + "<privacy-dialog></privacy-dialog>\n" + "\n" + '<form name="$ctrl.mainForm" id="$ctrl.mainForm" class="scanScreen mainForm">\n' + '    <div class="xrx-close" style="max-width:0; max-height:0;"></div> \x3c!-- Preloads the glyph font --\x3e\n' + "\n" + '    <div class="header themed" action-bar>\n' + "\n" + '        <div class="header-right">\n' + "            \x3c!-- XBB-422 Look for undefined, null, or length < 1 --\x3e\n" + '            <button type="button" class="btn btn-medium btn-glyph-label xrx-scan" ng-click="$ctrl.scan()"\n' + '                    ng-disabled="!$ctrl.validationStatus">\n' + '                <span xas-string="SDE_SCAN"></span>\n' + "            </button>\n" + "        </div>\n" + "\n" + '        <div class="header-middle text-large">\n' + '            <div class="header-title-container text-large">\n' + '                <div class="header-title text-large" xas-string="SDE_WRITTEN_NOTE_CONVERSION4"></div>\n' + "            </div>\n" + "        </div>\n" + "\n" + "    </div>\n" + "\n" + "\n" + "    \x3c!-- Scroll container --\x3e\n" + '    <div class="scroll-container" style="position:relative;overflow:hidden;" ng-scrollable=\'{"autoHeight": true, "watchHeight": true}\'>\n' + '        <div class="grid-container">\n' + "\n" + "\n" + "\n" + "            \x3c!-- Email Textbox--\x3e\n" + "            <div class=\"grid-row themed\" ng-class=\"{'has-warning': $ctrl.hasError('email') }\">\n" + '                <div class="column-10-59 column-offset-10-2 column-5-g-61 column-offset-5-c-1">\n' + '                    <text-field name="$ctrl.scanOptionsService.email" placeholder="{{\'SDE_ENTER_EMAIL_RECEIVE1\' | translate}}" type="email" class="ad-themed">\n' + '                        <input ng-blur="$ctrl.fieldBlur(\'email\');" type="email" name="email" class="form-control textField text-medium login" xas-placeholder="SDE_ENTER_EMAIL_RECEIVE1"\n' + '                               ng-model="$ctrl.scanOptionsService.email" required ng-model-options="{allowInvalid: true}" ng-change="$ctrl.fieldChange(\'email\');" tabindex="-1">\n' + "                    </text-field>\n" + "                </div>\n" + "            </div>\n" + "\n" + '            <div class="grid-row themed" id="emailHasErrors" style="display:none">\n' + '                <div class="validation-error" id="emailHasErrorRequired">\n' + '                    <span class="xrx-glyph xrx-alert"></span><span class="error-message" xas-string="SDE_REQUIRED_FIELD1"></span>\n' + "                </div>\n" + '                <div class="validation-error" id="emailHasErrorNotValid">\n' + '                    <span class="xrx-glyph xrx-alert"></span><span class="error-message" xas-string="SDE_EMAIL_NOT_VALID"></span>\n' + "                </div>\n" + "            </div>\n" + "\n" + "            \x3c!-- File Name--\x3e\n" + '            <div class="grid-row themed themed-header">\n' + '                <div class="column-10-50 column-offset-10-2 column-5-g-48 column-offset-5-c-1">\n' + '                    <button type="button" class="btn btn-medium subjectButton" style="text-align:left;" tabindex="-1">\n' + '                        <editable-field id="scanOptionsServiceFileName" placeholder="SDE_ENTER_FILE_NAME1" name="$ctrl.scanOptionsService.fileName" ng-disabled="$ctrl.scanService.isScanning"\n' + '                                        defaultfilename="Xerox Scan"\n' + '                                        typedfilename="{{$ctrl.scanOptionsService.fileName}}"\n' + '                                        ext="{{$ctrl.scanOptionsService.fileFormat.selectedOption.value}}"\n' + '                                        display-format="SDE_FMTSTR_DATE_TIMEFMTSTR">\n' + "                        </editable-field>\n" + "                    </button>\n" + "                </div>\n" + "\n" + '                <div class="column-10-8 column-offset-10-1 column-5-c-12 column-offset-5-g-1">\n' + '                    <button type="button" class="btn btn-medium"\n' + '                            ng-bind="$ctrl.scanOptionsService.fileFormat.selectedOption.title"\n' + '                            ng-tap-click="$ctrl.openFeaturePopover($ctrl.scanOptionsService.fileFormat)" ></button>\n' + "                </div>\n" + "            </div>\n" + "            \x3c!-- End of File Name--\x3e\n" + "\n" + '            <div class="separator"></div>\n' + "\n" + "            \x3c!-- List of all the scan features/options  --\x3e\n" + '            <div class="grid-row option-content">\n' + '                <div class="column-10-59 column-offset-10-2 column-5-g-61 column-offset-5-c-1">\n' + "\n" + '                    <ul class="action-list">\n' + "                        \x3c!--//XBB-168 - Present and Order by: 2-Sided Scanning, Resolution, Output Color, Original Orientation  --\x3e\n" + '                        <li ng-repeat="feature in $ctrl.scanOptionsService.scanFeatures track by feature.name"\n' + "                            ng-class-odd=\"'featureOddRow'\" ng-class-even=\"'featureEvenRow'\">\n" + "\n" + '                            <button type="button" class="btn btn-medium btn-image" ng-tap-click="$ctrl.openFeaturePopover(feature)" tabindex="-1">\n' + '                                <div class="image-container rounded">\n' + '                                    <img class="image" ng-src="Content/Images/{{feature.icon}}">\n' + "                                </div>\n" + "\n" + '                                <div class="text-container">\n' + '                                    <span class="left-text" xas-string="{{feature.title}}"></span>\n' + '                                    <span ng-if="feature.name==\'originalSize\'" class="glyph-container wnc-app">\n' + '                                        <span ng-class="feature.selectedOption.glyph"></span>\n' + "                                    </span>\n" + '                                    <span class="right-text" xas-string="{{feature.selectedOption.title}}"></span>\n' + "                                </div>\n" + "                            </button>\n" + "\n" + "                        </li>\n" + "\n" + "                    </ul>\n" + "                </div>\n" + "\n" + "            </div>\n" + "\n" + "            \x3c!-- Reset button--\x3e\n" + '            <div class="grid-row footer">\n' + '                <div class="grid-row">\n' + '                    <div class="column-10-29 column-offset-10-2 column-5-g-30 column-offset-5-c-1">\n' + '                        <button type="button" class="btn btn-medium" ng-tap-click="$ctrl.resetSettings(true)" tabindex="-1" type="button">\n' + '                            <span xas-string="SDE_RESET"></span>\n' + "                        </button>\n" + "                    </div>\n" + '                    <div class="column-10-29 column-offset-10-1 column-5-g-30 column-offset-5-g-1">\n' + '                        <button type="button" class="btn btn-primary btn-medium" ng-click="$ctrl.openPrivacy()" xas-string="SDE_PRIVACY_STATEMENT"></button>\n' + "                    </div>\n" + "                </div>\n" + "            </div>\n" + "\n" + "        </div>\n" + "\n" + "    </div>\n" + "</form>");
} ]);

angular.module("Scripts/App/Components/spinBox.html", []).run([ "$templateCache", function($templateCache) {
    $templateCache.put("Scripts/App/Components/spinBox.html", '<div class="alignSpinbox">\n' + '    <div class="xrx-spinbox" style="margin:0px">\n' + '        <div style="display:inline-block;">\n' + '            <input type="text" numbers-only class="xrx-spinbox-button option-text" ng-focus="$ctrl.inputFocused=true" ng-blur="$ctrl.inputFocused=false" ng-class="{\'xrx-spinbox-first-button\': $ctrl.interactive}" ng-model="$ctrl.ngModel" maxlength="4" ng-trim="false" disabled>\n' + '        </div><div class="xrx-spinbox-button-container" ng-mousedown="$ctrl.mouseDown(-1)" ng-mouseup="$ctrl.mouseUp()" ng-mouseleave="$ctrl.mouseUp()" ng-disabled="$ctrl.ngModel == $ctrl.min">\n' + '            <button class="xrx-spinbox-button xrx-spinbox-border" ng-class="{\'xrx-spinbox-first-button\': !$ctrl.interactive && !$ctrl.inputFocused}" ng-click="$event.stopPropagation();">\n' + '                <span class="xrx-glyphicon xrx-minus"></span>\n' + "            </button>\n" + '        </div><div class="xrx-spinbox-button-container" ng-mousedown="$ctrl.mouseDown(1)" ng-mouseup="$ctrl.mouseUp()" ng-mouseleave="$ctrl.mouseUp()" ng-disabled="$ctrl.ngModel == $ctrl.max">\n' + '            <button class="xrx-spinbox-button xrx-spinbox-last-button" ng-click="$event.stopPropagation();">\n' + '                <span class="xrx-glyphicon xrx-plus"></span>\n' + "            </button>\n" + "        </div>\n" + "    </div>\n" + "</div>");
} ]);

angular.module("Scripts/App/Components/toggleSwitch.html", []).run([ "$templateCache", function($templateCache) {
    $templateCache.put("Scripts/App/Components/toggleSwitch.html", '<div class="xrxToggleSwitch" ng-tap-click="$ctrl.toggle(); $event.stopPropagation();">\n' + '    <span class="xrxOn"></span>\n' + '    <span class="xrxOff"></span>\n' + '    <span draggable class="xrxSwitch">\n' + '        <span class="line"></span>\n' + '        <span class="line"></span>\n' + '        <span class="line"></span>\n' + "    </span>\n" + "</div>");
} ]);